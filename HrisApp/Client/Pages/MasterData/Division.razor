@page "/division"
@inject IDivisionService DivisionService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <div class="d-flex flex-row mt-3 justify-content-between">
        <h3 class="m-3 ms-0">Division Management</h3>
        <button class="btn btn-primary" @onclick="OpenAddDivision"><i class="oi oi-plus me-1"></i> Add New Division</button>
    </div>
</MudContainer>

@if (DivisionService.DivisionTs == null || DivisionService.DivisionTs.Count == 0)
{
    <span>Loading........!!!!</span>
}
else
{
    <MudTable Items="divisionList" Context="divisions" Elevation="0" HorizontalScrollbar="true" Dense="false" Hover="true" Bordered="false" Striped="true" Filter="new Func<DivisionT,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ColGroup>
            <col style="width: 15px;" />
            <col style="width: 1px;" />

        </ColGroup>
        <ToolBarContent>
            @* <MudText Typo="Typo.h6">Departments</MudText>*@
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">@divisions.Name</MudTd>
            <MudTd Class="text-sm-end">
                @*<MudButton Variant="Variant.Text" OnClick="@(() => OpenDrawer(Anchor.End))"><i class="oi oi-pencil" /></MudButton>*@
                <button class="btn btn-primary" @onclick="(() => OpenUpdateDivision(divisions.Id))"><i class="oi oi-pencil"></i></button>
                
            </MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, int.MaxValue }" InfoFormat="@($"Right {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
        </PagerContent>
    </MudTable>
}


@code {

    private DivisionT divisions = new DivisionT();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await DivisionService.GetDivisionList();
            divisionList = DivisionService.DivisionTs;
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex);

        }
    }


    //TABLEEES
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString1 = "";
    List<DivisionT> divisionList = new List<DivisionT>();
    private DivisionT selectedItem1 = null;
    private HashSet<DivisionT> selectedItems = new HashSet<DivisionT>();

    private bool FilterFunc1(DivisionT divisions) => FilterFunc(divisions, searchString1);

    private bool FilterFunc(DivisionT employees, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (employees.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    //END FOR TABLES

    //OPEN DIALOGS
    private void OpenUpdateDivision(int id)
    {
        var parameters = new DialogParameters<UpdateDivisionDialog>();
        parameters.Add(x => x.Id, id);

        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<UpdateDivisionDialog>("Update Division", parameters, options);
    }

    private void OpenAddDivision()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<AddDivisionDialog>("New Division", options);
    }
}
