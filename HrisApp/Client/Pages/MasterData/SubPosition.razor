@page "/subposition"
@inject IDivisionService DivisionService
@inject IDepartmentService DepartmentService
@inject ISectionService SectionService
@inject IPositionService PositionService
@inject IAreaService AreaService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject StateService StateService
@attribute [Authorize(Roles = "System Administrator")]

<PageTitle>Sub Position Management</PageTitle>

<div class="mb-5">
    <div class="d-flex flex-row mt-5 justify-content-between align-items-center">
        <span style="font-size: x-large;font-weight: 600;color: #424242;">Sub Position Management</span>
        <AuthorizeView Roles="System Administrator">
            <Authorized>
                <MudButton OnClick="OpenAddPosition" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.Add" Class="btnadd"> Position</MudButton>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

@* <div class="box w-auto">
     @if (subpositionList == null || subpositionList.Count == 0)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" hidden="@isVisible" />

        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="auto" hidden="@isVisible" />
        <MudCardContent hidden="@isVisible">
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions hidden="@isVisible">
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
        @if (isVisible == true)
        {
            <div class="divnodata">
                <MudImage Src="images/nodata.png" Alt="No Data" Width="332" Height="220" Class="rounded-lg" />
                <span class="nodataspan">No Data Available</span>
            </div>
        }
    }
    else
    {
        <MudTable Class="stable" Items="subpositionList" Context="pos" FixedHeader="true" Elevation="0" Height="620px" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<PositionT,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <HeaderContent>
                <MudTh Style="background: #e9ecef; font-size: 16px;">
                    <div class="d-flex justify-content-between">
                        <div class="ttitle">Division</div>
                        <div class="">
                            <MudIcon Icon="@Icons.Material.Rounded.KeyboardArrowRight" Title="Favorite" />
                        </div>
                    </div>
                </MudTh>
                <MudTh Style="background: #e9ecef; font-size: 16px;">
                    <div class="d-flex justify-content-between">
                        <div class="ttitle">Department</div>
                        <div class="">
                            @*                          <MudIcon Icon="@Icons.Material.Rounded.KeyboardDoubleArrowRight" Title="Favorite" />
                        *@
                        </div>
                    </div>
                </MudTh>
                @*  <MudTh  Style="background: #e9ecef; font-size: 16px;">
            <div class="d-flex justify-content-between">
            <div class="ttitle">Section</div>
            <div class="">
            <MudIcon Icon="@Icons.Material.Rounded.ArrowRight" Title="Favorite" />

            </div>
            </div>
            </MudTh> *@
                <MudTh Style="font-weight: bold; background: #e9ecef; font-size: 16px;">
                    <MudTableSortLabel SortBy="new Func<PositionT, object>(x=>x.Name)">
                        Position
                    </MudTableSortLabel>
                </MudTh>
                <MudTh Style="font-weight: bold; background: #e9ecef; font-size: 16px;">Area</MudTh>
                <MudTh Style="font-weight: bold; background: #e9ecef; font-size: 16px; text-align: center">No. of Personnel <br>Required</MudTh>
                <MudTh Style="font-weight: bold; background: #e9ecef; font-size: 16px; text-align: center">Additional<br />Info</MudTh>
                <MudTh Style="font-weight: bold; background: #e9ecef; font-size: 16px; text-align: center">Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                @foreach (var item in Divisions)
                {
                    if (item.Id == pos.DivisionId)
                    {
                        <MudTd DataLabel="Division">
                            <div class="d-flex justify-content-between">
                                <div class="">@item.Name</div>
                                <div class="">
                                    <MudIcon Icon="@Icons.Material.Rounded.KeyboardArrowRight" Title="Favorite" Style="margin-left: 20px; color: #90A4AE;" />
                                </div>
                            </div>
                        </MudTd>
                    }
                }
                @foreach (var item in Departments)
                {
                    if (item.Id == pos.DepartmentId)
                    {
                        <MudTd DataLabel="Department">
                            <div class="d-flex justify-content-between">
                                <div class="">@item.Name</div>
                                <div class="">
                                    @* <MudIcon Icon="@Icons.Material.Rounded.KeyboardDoubleArrowRight" Title="Favorite" Style="color: #90A4AE;" /> *@
                                </div>
                            </div>
                        </MudTd>
                    }
                }


                <MudTd DataLabel="" Style="font-weight: bold;  background-color: rgb(197,207,210, 0.2);">@pos.Name</MudTd>
                <MudTd DataLabel="">
                    @foreach (var item in Areas)
                    {
                        if (item.Id == pos.AreaId)
                        {
                            @item.Name
                        }
                    }
                </MudTd>
                <MudTd DataLabel="" Style="text-align: center">@pos.Plantilla</MudTd>
                <MudTd DataLabel="" Style="text-align: center">
                    <MudIconButton Class="btnedit" OnClick="(() => OpenViewPosition(pos.Id))" Icon="@Icons.Material.Rounded.Info" aria-label="Show"></MudIconButton>
                </MudTd>
                <MudTd Style="text-align: center">
                    <AuthorizeView Roles="System Administrator">
                        <Authorized>
                            <MudTooltip Text="Update">
                                <MudIconButton Class="btnedit" OnClick="(() => OpenUpdatePosition(pos.Id))" Icon="@Icons.Material.Rounded.Edit" aria-label="Edit"></MudIconButton>
                            </MudTooltip>
                        </Authorized>
                        <NotAuthorized>
                            <MudIconButton Disabled Class="btnedit" OnClick="(() => OpenUpdatePosition(pos.Id))" Icon="@Icons.Material.Rounded.Edit" aria-label="Edit"></MudIconButton>
                         </NotAuthorized>
                     </AuthorizeView>
                 </MudTd>

             </RowTemplate>
             <PagerContent>
                 @* <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, int.MaxValue }" InfoFormat="@($"Right {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" /> *@
             </PagerContent>
         </MudTable>
    }
</div> *@


@code {
    private List<PositionT> Positions = new();
    List<SubPositionT> subpositionList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(500);
            StateService.OnChange += OnStateChanged;
            await LoadList();

            await DepartmentService.GetDepartment();
            await DivisionService.GetDivision();
            await SectionService.GetSection();
            await AreaService.GetArea();

            // Divisions = DivisionService.DivisionTs;
            // Departments = DepartmentService.DepartmentTs;
            // Sections = SectionService.SectionTs;
            // Areas = AreaService.AreaTs;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task LoadList()
    {
        await PositionService.GetPosition();
        StateService.SetState("SubPositionList", PositionService.PositionTs);
    }

    private void OnStateChanged()
    {
        // Handle state changes, e.g., update the areaList
        subpositionList = StateService.GetState<List<SubPositionT>>("SubPositionList");
        StateHasChanged();
    }

    private void OpenAddPosition()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Small };
        DialogService.Show<AddSubPositionDialog>("New Position", options);
    }
}
