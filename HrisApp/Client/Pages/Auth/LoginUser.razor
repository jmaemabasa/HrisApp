@layout AuthLayout
@page "/"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudGrid Justify="Justify.Center" Class="w-75">
    <MudItem xs="12" sm="7">
        <h3>Login</h3>
        @if (showAlert)
        {
            <MudAlert Severity="@_severity" ShowCloseIcon="true" CloseIconClicked="CloseMe" Class="mb-2">@message</MudAlert>
        }
        <EditForm Model="@log" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="log.Username" Label="Username" Variant="Variant.Outlined" Margin="Margin.Dense" For="@(() => log.Username)" Class="mb-2" />

            <MudTextField @bind-Value="log.Password" Label=" Password" Class="mb-2" For="@(() => log.Username)" Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />

            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Info" FullWidth="true" Class="mb-2">Login</MudButton>

        </EditForm>
    </MudItem>
</MudGrid>
@code {
    private UserMasterT log = new UserMasterT();

    bool success;
    string message = string.Empty;
    MudBlazor.Severity _severity;
    private bool showAlert = false;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
            {
                returnUrl = url;
            }
        }
        catch (Exception ex)
        {
            showAlert = true;
            _severity = Severity.Error;
            message = ex.Message.ToString();
            Console.WriteLine(ex.Message.ToString());
        }

    }
    public void CloseMe()
    {
        showAlert = false;
    }

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthService.Login(log);
            if (result.Success)
            {
                message = string.Empty;

                await LocalStorage.SetItemAsync("token", result.Data);
                await AuthenticationStateProvider.GetAuthenticationStateAsync();

                NavigationManager.NavigateTo("/index");

            }
            else
            {
                showAlert = true;
                _severity = Severity.Error;
                message = result.Message;

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message.ToString());
            showAlert = true;
            _severity = Severity.Error;
            message = ex.Message.ToString();
        }
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
