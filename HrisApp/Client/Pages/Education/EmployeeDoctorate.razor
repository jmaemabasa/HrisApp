@page "/employeedoctorate"
@inherits MudComponentBase
@inject IEducationService EducationService
@inject NavigationManager NavigationManager

<style>
    .stable {
        background: #e9ecef;
        border-radius: 20px;
    }

    .txf1 {
        height: 45px;
        box-shadow: inset -5px -5px 10px #ffffff, inset 5px 5px 10px #bebebe;
        border-radius: 10px;
        border: 0;
        padding: 0 0 10px 15px;
        margin-top: 0;
        background: #e9ecef;
        padding-top: 10px;
        padding-right: 10px;
        width: 100%;
    }

    .spantitle {
        font-weight: bold;
        color: #26446e;
        font-size: 16px;
    }

    .btnnext {
        border: none;
        box-shadow: -5px -5px 10px #ffffff, 5px 5px 10px #cacdcf;
        border-radius: 10px;
        background-color: #AEC3AE;
        color: #26446e;
        padding-bottom: 10px;
        padding-top: 10px;
        font-weight: bold;
        width: 200px;
    }
</style>
@if (doctorateList.Count == 0 || doctorateList == null)
{
    <div class="d-flex flex-grow-1 justify-content-between align-items-center">
        <span class="spantitle mb-3">No Doctorate Information.</span>
        <MudTooltip Text="Add">
            <MudButton Class="btnedit" OnClick="@(() => OpenDrawer(Anchor.End, "DoctorateOpen"))" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary">Add Information</MudButton>
        </MudTooltip>
    </div>
}
else
{
    <MudTable Class="stable" Items="doctorateList" Context="doctorate" FixedHeader="true" Elevation="0" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<DoctorateT,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <div class="d-flex flex-grow-1 justify-content-between align-items-center">
                <span class="spantitle mb-3">Doctorate Education</span>
                <MudTooltip Text="Add">
                    <MudButton Class="btnedit" OnClick="@(() => OpenDrawer(Anchor.End, "DoctorateOpen"))" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary">Add Information</MudButton>
                </MudTooltip>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="col-3" Style="background: #e9ecef; font-weight: bold;">School Name</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold;">Location</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold;">Course</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold;">Awards</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold;">School Year</MudTh>
            <MudTh Style="background: #e9ecef; font-weight: bold;">Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">@doctorate.DocSchoolName</MudTd>
            <MudTd DataLabel="">@doctorate.DocSchoolLoc</MudTd>
            <MudTd DataLabel="">@doctorate.DocCourse</MudTd>
            <MudTd DataLabel="">@doctorate.DocAward</MudTd>
            <MudTd DataLabel="">@doctorate.DocSchoolYear</MudTd>
            <MudTd>
                <MudIconButton Class="btnedit" OnClick="@(() => DeleteDoc(doctorate.Id))" Icon="@Icons.Material.Rounded.Delete" Size="Size.Small" aria-label="Delete" Style="color: #BB6464;"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
<MudDrawer Class="drawerdetails" @bind-Open="@DoctorateOpen" Width="@width" Height="@height" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary" Style=" margin: 10px;">
    <span class="spantitle mb-3">Doctorate Education</span>
    <MudItem xs="12">
        <EditForm Model="doctorate" OnValidSubmit="SaveCollege" class="d-flex flex-column flex-grow-1" style="margin-top: 13px;">
            <MudItem xs="12" Class="mb-2">
                <MudInputLabel>Name of School</MudInputLabel>
                <InputText Class="txf1" @bind-Value="doctorate.DocSchoolName" />
                <ValidationMessage For="@(() => doctorate.DocSchoolName)" class="mb-2 valmessage" />
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudInputLabel>School Location</MudInputLabel>
                <InputText Class="txf1" @bind-Value="doctorate.DocSchoolLoc" />
                <ValidationMessage For="@(() => doctorate.DocSchoolLoc)" class="mb-2 valmessage" />
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudInputLabel>Course</MudInputLabel>
                <InputText Class="txf1" @bind-Value="doctorate.DocCourse" />
                <ValidationMessage For="@(() => doctorate.DocCourse)" class="mb-2 valmessage" />
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudInputLabel>Award</MudInputLabel>
                <InputText Class="txf1" @bind-Value="doctorate.DocAward" />
                <ValidationMessage For="@(() => doctorate.DocAward)" class="mb-2 valmessage" />
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudInputLabel>School Year</MudInputLabel>
                <InputText Class="txf1" @bind-Value="doctorate.DocSchoolYear" />
                <ValidationMessage For="@(() => doctorate.DocSchoolYear)" class="mb-2 valmessage" />
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-content-center mt-5">
                <button Class="btn btnnext" type="submit">SAVE</button>
            </MudItem>
        </EditForm>
    </MudItem>
</MudDrawer>


@code {
    private DoctorateT doctorate = new DoctorateT();
    [Parameter]
    public string? VerifyCode { get; set; }

    bool DoctorateOpen;
    Anchor anchor;
    string width = "500px", height = "100%";
    void OpenDrawer(Anchor anchor, string drawerx)
    {
        DoctorateOpen = (drawerx == "DoctorateOpen") ? true : false;
        this.anchor = anchor;
    }
    protected async Task SaveCollege()
    {
        doctorate.Verify_Id = VerifyCode;
        await EducationService.CreateDoctorate(doctorate);
        doctorate.DocSchoolName = "";
        doctorate.DocSchoolLoc = "";
        doctorate.DocCourse = "";
        doctorate.DocAward = "";
        doctorate.DocSchoolYear = "";
        doctorateList = await EducationService.GetDoctoratelist(VerifyCode);
        DoctorateOpen = false;

    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            doctorateList = await EducationService.GetDoctoratelist(VerifyCode);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    async Task DeleteDoc(int id)
    {
        await EducationService.DeleteDoctorate(id);
        doctorateList = await EducationService.GetDoctoratelist(VerifyCode);
    }


    //TABLEEES
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString1 = "";
    List<DoctorateT> doctorateList = new List<DoctorateT>();
    private DoctorateT selectedItem1 = null;
    private HashSet<DoctorateT> selectedItems = new HashSet<DoctorateT>();

    private bool FilterFunc1(DoctorateT item) => FilterFunc(item, searchString1);

    private bool FilterFunc(DoctorateT item, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        // if (employees.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //     return true;
        return false;
    }
        //END FOR TABLES
}
