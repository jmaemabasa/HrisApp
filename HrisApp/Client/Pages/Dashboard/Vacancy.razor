@page "/vacancy"
@inject IPositionService PositionService
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService

<PageTitle>Vacancy</PageTitle>

<div class="mb-5">
    <div class="d-flex flex-row mt-5 justify-content-between align-items-center">
        <span style="font-size: x-large;font-weight: 600;color: #424242;">Vacancies as of Today</span>
        <span style="font-size: x-large; color: #424242;">@DateTime.Now.ToString("dddd, dd MMMM yyyy")</span>
    </div>
</div>

<div class="box w-auto">
     
    <MudGrid Justify="Justify.FlexStart" Spacing="5">
    @try
    {
        @foreach (var department in DepartmentService.DepartmentTs)
        {
            var departmentVacancies = allPositions
            .Where(position => position.DepartmentId == department.Id)
            .Select(position =>
            {
                var positionId = position.Id;
                var vacancy = plantillaPositions.ContainsKey(positionId)
                ? plantillaPositions[positionId] - positionCounts[positionId] : 0;
                return vacancy;
            })
            .Sum();
            
                @if (departmentVacancies > 0)
                {
                    <MudItem xs="12" sm="3">
                        <MudCard Class="carddep" Elevation="0">
                            <MudCardContent Class="carddepcontent">
                                <div class="d-flex justify-content-center align-items-center gap-2 m-1 mb-5">
                                    <MudIcon Icon="@Icons.Material.TwoTone.OtherHouses" Style="font-size: 1.2rem; color: #8176e6" />
                                    <span style="color: #424242; font-size: 16px;">@department.Name</span>
                                </div>
                                @foreach (var position in allPositions)
                                {
                                    var positionId = position.Id;
                                    var vacancy = plantillaPositions.ContainsKey(positionId)
                                    ? plantillaPositions[positionId] - positionCounts[positionId]
                                    : 0;

                                    if (position.DepartmentId == department.Id && vacancy != 0)
                                    {
                                        <div class="divsingledetails d-flex justify-content-between mb-2">
                                            <MudText Class="txt" Align="Align.Start" Typo="Typo.caption">@position.Name</MudText>
                                            <div class="d-flex w-25 justify-content-between">
                                                <MudText Class="txt" Align="Align.Start" Typo="Typo.caption">:</MudText>
                                                <MudText Class="txt"  Align="Align.Start" Style="color: #292727; font-weight:bold;" Typo="Typo.body2">@vacancy</MudText>
                                            </div>
                                        </div>
                                    }
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
        }
    }
    catch (Exception)
    {
        Console.WriteLine("");
    }
    </MudGrid>

</div>


@code {
    private string _countEmployees = "0";

    private List<PositionT> allPositions;
    private Dictionary<int, int> positionCounts = new Dictionary<int, int>();
    private Dictionary<int, int> plantillaPositions = new Dictionary<int, int>();

    private int _totalVacancy = 0;

    protected override async Task OnInitializedAsync()
    {
        await DepartmentService.GetDepartment();

        await EmployeeService.GetEmployee();
        _countEmployees = EmployeeService.EmployeeTs.Where(e => e.StatusId == 1).Count().ToString();

        allPositions = await PositionService.GetPositionList();

        plantillaPositions = new Dictionary<int, int>
            {
                { 1, 3 }, { 2, 2 }, { 3, 0 }, { 4, 0 }, { 5, 0 }, { 6, 0 }, { 7, 4 },{ 48, 3 }, { 49, 1 }
            };

        foreach (var position in allPositions)
        {
            int positionId = position.Id;
            int count = EmployeeService.EmployeeTs.Count(e => e.PositionId == positionId);
            positionCounts[positionId] = count;

            //if (plantillaPositions.ContainsKey(positionId) && (plantillaPositions[positionId] - positionCounts[positionId] != 0))
            //{
            //    Console.WriteLine($"Position ID: {positionId}, Employee Count: {count}, Plantilla: {plantillaPositions[positionId]}, ds: {plantillaPositions[positionId] - positionCounts[positionId]}");
            //}
        }
        _totalVacancy = allPositions
       .Select(position => plantillaPositions.ContainsKey(position.Id) ? plantillaPositions[position.Id] - positionCounts[position.Id] : 0)
       .Sum();
    }
}
