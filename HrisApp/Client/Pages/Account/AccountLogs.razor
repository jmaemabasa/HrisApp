@page "/account/logs"
@page "/account/logs/{id:int}"

@attribute [Authorize(Roles = "SysAdmin")]

<PageTitle>Audit Log</PageTitle>

<div class="mb-2">
    <div class="d-flex flex-row justify-content-between align-items-center">
        <span style="font-size: x-large;font-weight: 600;color: #424242;">
            Audit Logs | @foreach (var item in employeeList)
            {
                if (item.Id == Id)
                {
                    <span style="font-weight: 400">@($"{item.FirstName} {item.LastName}")</span>
                }
            }
        </span>
        <MudButton OnClick="BackBtn" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.KeyboardArrowLeft" Class="btnBack">Back</MudButton>
    </div>
</div>

<div class="box w-auto">
    <div class="d-flex flex-grow-1 align-items-lg-start justify-content-between" style="padding: 0px 50px 0px 50px;">
        <div class="w-25">
            <MudTextField DisableUnderLine @bind-Value="@searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="tsearch" Immediate=true Margin="Margin.Dense" />
        </div>
        <div>
            <MudDateRangePicker Class="daterangepicker" Label="Filter Date" DateRangeChanged="@DateRangeChange" PlaceholderStart="Start Date" PlaceholderEnd="End Date" />
        </div>
    </div>
    @if (logsList == null || logsList.Count() == 0)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" hidden="@isVisible" />

        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="auto" hidden="@isVisible" />
        <MudCardContent hidden="@isVisible">
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions hidden="@isVisible">
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
        @if (isVisible == true)
        {
            <div class="divnodata">
                <MudImage Src="images/nodata.png" Alt="No Data" Width="332" Height="220" Class="rounded-lg" />
                <span class="nodataspan">No Data Available</span>
            </div>
        }
    }
    else
    {
        <MudTable Class="stable" Items="logsList" Context="log" SortLabel="Sort By" FixedHeader="true" Elevation="0" Height="593px" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<AuditlogsT,bool>(FilterFunc1)">
            <HeaderContent>
                <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">User</MudTh>
                <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Action</MudTh>
                <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Type</MudTh>
                <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Timestamp</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2" Style="font-weight: bold; color: #424242;">@log.EmployeeUSer?.FirstName @log.EmployeeUSer?.LastName</MudText>
                        <MudText Typo="Typo.caption" Style="color: #A6AABA;">@GetRole(log.EmployeeUserId.ToString())</MudText>
                    </div>
                </MudTd>
                <MudTd Style=""><span class="@ActionColor(log.Action)">@log.Action</span></MudTd>
                <MudTd>@log.Type</MudTd>
                <MudTd>
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2" Style="color: #424242;">@log.Date?.ToString("dd MMM yyyy")</MudText>
                        <MudText Typo="Typo.caption" Style="color: #A6AABA;">@log.Date?.ToString("hh:m   tt")</MudText>
                    </div>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 15, 25, 50, int.MaxValue }" InfoFormat="@($"Right {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
            </PagerContent>
        </MudTable>
    }
</div>

@code {
#nullable disable
    [Parameter]
    public int? Id { get; set; }
    AuditlogsT _auditlogs = new();

    private List<EmployeeT> employeeList = new List<EmployeeT>();
    private List<UserMasterT> userList = new List<UserMasterT>();
    private List<AuditlogsT> logsList = new List<AuditlogsT>();
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString1 = "";
    public DateRange _dateRange = new DateRange
        {
            Start = DateTime.Now.AddDays(-15),
            End = DateTime.Now
        };

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        await AuditlogService.GetLogs();

        await EmployeeService.GetEmployee();
        employeeList = EmployeeService.EmployeeTs;

        await AuthService.GetUsers();
        userList = AuthService.UserMasterTs;
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(100);
        logsList = AuditlogService.AuditlogsTs.Where(log => log.EmployeeUserId == Id && log.Date >= _dateRange.Start && log.Date <= _dateRange.End).OrderByDescending(log => log.Date).ToList();
    }

    public void DateRangeChange(DateRange dateRange)
    {
        _dateRange = dateRange;

        logsList = AuditlogService.AuditlogsTs
            .Where(log => log.EmployeeUserId == Id && log.Date >= _dateRange.Start && log.Date <= _dateRange.End)
            .OrderByDescending(log => log.Date)
            .ToList();

        Console.WriteLine(_dateRange.Start + " " + _dateRange.End);
        if (logsList == null || logsList.Count() == 0)
        {
            OpenOverlay();
        }
    }

    public void BackBtn() => NavigationManager.NavigateTo("/accounts");

    private bool FilterFunc1(AuditlogsT log) => FilterFunc(log, searchString1);

    private bool FilterFunc(AuditlogsT log, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (log.Action.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((log.EmployeeUSer?.FirstName + " " + log.EmployeeUSer?.LastName).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (String.Format("{0:dd MMM yyyy}", log.Date).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private string GetRole(string employeeId)
    {
        // Logic to get the user name based on the employee ID
        var role = userList.FirstOrDefault(e => e.Id == Convert.ToInt32(employeeId));
        return role != null ? $"{role.Role}" : "";
    }

    private static string ActionColor(string action)
    {
        return action.ToLower() switch
        {
            "create" => "actionCreate",
            "update" => "actionUpdate",
            "delete" => "actionDelete",
            "logged in" => "actionLogged",
            _ => "actionDefault",
        };
    }

    private bool isVisible;
    public async void OpenOverlay()
    {
        isVisible = false;
        await Task.Delay(2000);
        isVisible = true;
        Console.WriteLine(isVisible);
        StateHasChanged();
    }
}

