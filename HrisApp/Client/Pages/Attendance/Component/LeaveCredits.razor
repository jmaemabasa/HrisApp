@inject ILeaveCredService LeaveCredService
@inject ILeaveHistoryService LeaveHistoryService
@inject IDialogService DialogService
@inject StateService StateService


<MudCard Class="empdmain">
    <MudCardContent>
        <div class="d-flex justify-content-between">
            <span class="maintitlespan">Leave Balance</span>

            <button class="Btn" onclick="@(() => OpenUpdateCred(empLeaveCred.Id))">

                <div class="sign"><MudIcon Icon="@Icons.Material.Rounded.Edit"></MudIcon></div>

                <div class="text">Update</div>
            </button>
        </div>

        <div class="d-flex justify-content-around">
            <div class="d-flex flex-column justify-content-center align-items-center">
                <div class="progress-bar-el el" style="--el: @availableLeavetextEL">
                    <progress value="@empLeaveCred.EL" min="0" max="@empLeaveCred.EL" style="visibility:hidden;height:0;width:0;"></progress>
                    <div class="progress-text"><span class="progress-title">Available</span> <br> <span class="progress-count">@empLeaveCred.EL</span><span class="slash">/</span><span class="progress-total">@empLeaveCred.EL</span></div>
                </div>
                <div class="credtitle">Emergency Leave</div>
            </div>
            <div class="d-flex flex-column justify-content-center align-items-center">
                <div class="progress-bar-ml ml" style="--ml: @availableLeavetextML">
                    <progress value="@empLeaveCred.ML" min="0" max="@empLeaveCred.ML" style="visibility:hidden;height:0;width:0;"></progress>
                    <div class="progress-text"><span class="progress-title">Available</span> <br> <span class="progress-count">@empLeaveCred.ML</span><span class="slash">/</span><span class="progress-total">@empLeaveCred.ML</span></div>
                </div>
                <div class="credtitle">Maternity Leave</div>
            </div>
            <div class="d-flex flex-column justify-content-center align-items-center">
                <div class="progress-bar-pl pl" style="--pl: @availableLeavetextPL">
                    <progress value="@empLeaveCred.PL" min="0" max="@empLeaveCred.PL" style="visibility:hidden;height:0;width:0;"></progress>
                    <div class="progress-text"><span class="progress-title">Available</span> <br> <span class="progress-count">@empLeaveCred.PL</span><span class="slash">/</span><span class="progress-total">@empLeaveCred.PL</span></div>
                </div>
                <div class="credtitle">Paternity Leave</div>
            </div>
            <div class="d-flex flex-column justify-content-center align-items-center">
                <div class="progress-bar-sl sl" style="--sl: @availableLeavetext">
                    <progress value="@empLeaveCred.SL" min="0" max="@empLeaveCred.SL" style="visibility:hidden;height:0;width:0;"></progress>
                    <div class="progress-text"><span class="progress-title">Available</span> <br> <span class="progress-count">@empLeaveCred.SL</span><span class="slash">/</span><span class="progress-total">@empLeaveCred.SL</span></div>
                </div>
                <div class="credtitle">Sick Leave</div>
            </div>
            <div class="d-flex flex-column justify-content-center align-items-center">
                <div class="progress-bar-vl vl" style="--vl: @availableLeavetextVL">
                    <progress value="@empLeaveCred.VL" min="0" max="@empLeaveCred.VL" style="visibility:hidden;height:0;width:0;"></progress>
                    <div class="progress-text"><span class="progress-title">Available</span> <br> <span class="progress-count">@empLeaveCred.VL</span><span class="slash">/</span><span class="progress-total">@empLeaveCred.VL</span></div>
                </div>
                <div class="credtitle">Vacation Leave</div>
            </div>
            <div class="d-flex flex-column justify-content-center align-items-center">
                <div class="progress-bar-ol sl" style="--ol: @availableLeavetextOL">
                    <progress value="@empLeaveCred.OL" min="0" max="@empLeaveCred.OL" style="visibility:hidden;height:0;width:0;"></progress>
                    <div class="progress-text"><span class="progress-title">Available</span> <br> <span class="progress-count">@empLeaveCred.OL</span><span class="slash">/</span><span class="progress-total">@empLeaveCred.OL</span></div>
                </div>
                <div class="credtitle">Other</div>
            </div>

        </div>
    </MudCardContent>
</MudCard>

<MudCard Class="empdmain" Style="margin-top: 35px">
    <MudCardContent>
        <div class="d-flex justify-content-between">
            <span class="maintitlespan">Leave History</span>

            <button class="Btn" onclick="@(() => OpenAddHistory(verify))">

                <div class="sign"><MudIcon Icon="@Icons.Material.Rounded.Add"></MudIcon></div>

                <div class="text">Add Leave</div>
            </button>
        </div>

        @if (leaveHistoryList == null || leaveHistoryList.Count == 0)
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" hidden="@isVisible" />

            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="auto" hidden="@isVisible" />
            <MudCardContent hidden="@isVisible">
                <MudSkeleton Width="30%" Height="42px;" />
                <MudSkeleton Width="80%" />
                <MudSkeleton Width="100%" />
            </MudCardContent>
            <MudCardActions hidden="@isVisible">
                <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
            </MudCardActions>
            @if (isVisible == true)
            {
                <div class="divnodata">
                    <MudImage Src="images/nodata.png" Alt="No Data" Width="332" Height="220" Class="rounded-lg" />
                    <span class="nodataspan">No Data Available</span>
                </div>
            }
        }
        else
        {
            <MudTable Class="stable" Items="leaveHistoryList" Context="obj" SortLabel="Sort By" FixedHeader="true" Elevation="0" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" @bind-SelectedItem="selectedItem1">
                <HeaderContent>
                    <MudTh Class="" Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Leave Type</MudTh>
                    <MudTh Class="" Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Duration</MudTh>
                    <MudTh Class="" Style="background: #e9ecef; font-weight: bold; font-size: 16px;">No. of Days</MudTh>
                    <MudTh Class="" Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="">@obj.LeaveType</MudTd>
                    <MudTd DataLabel="">@obj.From?.ToString("MMM dd") - @obj.To?.ToString("MMM dd")</MudTd>
                    <MudTd DataLabel="">@obj.NoOfDays</MudTd>
                    <MudTd>
                        <AuthorizeView Roles="System Administrator">
                            <Authorized>
                                <MudTooltip Text="View">
                                    <MudIconButton Class="btnedit"  Icon="@Icons.Material.Rounded.Info" aria-label="Edit"></MudIconButton>
                                </MudTooltip>
                            </Authorized>
                            <NotAuthorized>
                                <MudIconButton Disabled Class="btnedit"  Icon="@Icons.Material.Rounded.Info" aria-label="Edit"></MudIconButton>
                             </NotAuthorized>
                         </AuthorizeView>
                     </MudTd>
                 </RowTemplate>
                 <PagerContent>
                     <MudTablePager PageSizeOptions="new int[] { 5, 10, int.MaxValue }" InfoFormat="@($"Right {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
                 </PagerContent>
            </MudTable>
        }
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string verify { get; set; }

    Emp_LeaveCreditT empLeaveCred = new();

    List<Emp_LeaveHistoryT> leaveHistoryList = new();
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString1 = "";
    private Emp_LeaveHistoryT selectedItem1 = null;

    private string availableLeavetext = "";
    private string availableLeavetextEL = "";
    private string availableLeavetextML = "";
    private string availableLeavetextPL = "";
    private string availableLeavetextVL = "";
    private string availableLeavetextOL = "";

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            empLeaveCred = await LeaveCredService.GetSingleLeaveCredByVerId(verify);

            await LeaveHistoryService.GetLeaveHistory();
            leaveHistoryList = LeaveHistoryService.Emp_LeaveHistoryTs.Where(d => d.Verify_Id == verify).ToList();

            if (leaveHistoryList == null || leaveHistoryList.Count == 0)
            {
                OpenOverlay();
            };

            availableLeavetext = ((Convert.ToDouble(empLeaveCred.SL) / Convert.ToDouble(empLeaveCred.SL)) * 100).ToString() + "%";
            availableLeavetextEL = ((Convert.ToDouble(empLeaveCred.EL) / Convert.ToDouble(empLeaveCred.EL)) * 100).ToString() + "%";
            availableLeavetextML = ((Convert.ToDouble(empLeaveCred.ML) / Convert.ToDouble(empLeaveCred.ML)) * 100).ToString() + "%";
            availableLeavetextPL = ((Convert.ToDouble(empLeaveCred.PL) / Convert.ToDouble(empLeaveCred.PL)) * 100).ToString() + "%";
            availableLeavetextVL = ((Convert.ToDouble(empLeaveCred.VL) / Convert.ToDouble(empLeaveCred.VL)) * 100).ToString() + "%";
            availableLeavetextOL = ((Convert.ToDouble(empLeaveCred.OL) / Convert.ToDouble(empLeaveCred.OL)) * 100).ToString() + "%";
        }
        catch (Exception)
        {
            Console.WriteLine("");
        }
    }

    private void OpenUpdateCred(int id)
    {
        var parameters = new DialogParameters<UpdateLeaveCreditDialog>();
        parameters.Add(x => x.Id, id);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<UpdateLeaveCreditDialog>("Update Leave Credits", parameters, options);
    }

    private void OpenAddHistory(string verid)
    {
        var parameters = new DialogParameters<AddLeaveHistoryDialog>();
        parameters.Add(x => x.verifyId, verid);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        DialogService.Show<AddLeaveHistoryDialog>("", parameters, options);
    }

    private bool isVisible;
    public async void OpenOverlay()
    {
        isVisible = false;
        await Task.Delay(2000);
        isVisible = true;
        StateHasChanged();
    }
}
