@inject SweetAlertService Swal
@inject IDivisionService DivisionService
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<MudDialog>
    <DialogContent>

        @if (selectedDivision != 0)
        {
            <MudTextField @bind-Value="newDepartment" Label="Add Department" Variant="Variant.Outlined" Style="margin-bottom:10px;" Margin="Margin.Dense" />
        }
        <MudSelect @bind-Value="selectedDivision" Variant="Variant.Outlined" Margin="Margin.Dense">
            <MudSelectItem Disabled="true" Style="width: 210px;" Value="0">Division</MudSelectItem>
            @foreach (var div in Division)
            {
                <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
            }
        </MudSelect>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" @onclick="ConfirmCreateDepartment">Save</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>


@code {
#nullable disable
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private Dictionary<string, List<DepartmentT>> Department = new Dictionary<string, List<DepartmentT>>();
    private List<DivisionT> Division = new List<DivisionT>();
    private int selectedDivision;
    private string newDepartment = "";

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await DivisionService.GetDivision();
        Division = DivisionService.DivisionTs;
    }

    private async Task ConfirmCreateDepartment()
    {
        MudDialog.Close();
        if (string.IsNullOrWhiteSpace(newDepartment))
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Warning",
                    Text = "Please enter a valid department!",
                    Icon = SweetAlertIcon.Warning
                });
        }
        else
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Do you want to create " + newDepartment + "?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });

            if (result.IsConfirmed)
            {
                await DepartmentService.CreateDepartment(newDepartment, selectedDivision);
                newDepartment = "";

                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Text = newDepartment + " Created Successfully!",
                        Icon = SweetAlertIcon.Success
                    });
                await jsRuntime.InvokeVoidAsync("location.reload");
                NavigationManager.NavigateTo("/department");


            }
        }
    }
}
