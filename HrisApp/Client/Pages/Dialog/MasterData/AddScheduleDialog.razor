@using System.Globalization;
@inject SweetAlertService Swal
@inject IScheduleService ScheduleService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject IToastService _toastService

<MudDialog>
    <DialogContent>
        <MudTextField Label="Schedule Type" @bind-Value="newSchedule" Variant="Variant.Outlined" Style="margin-bottom:10px;" />
        <MudTextField Label="Time-in" InputType="InputType.Time" @bind-Value="timein" Variant="Variant.Outlined" Style="margin-bottom:10px;" />
        <MudTextField Label="Time-out" InputType="InputType.Time" @bind-Value="timeout" Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" @onclick="ConfirmCreateSchedule">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    #nullable disable
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private string newSchedule = "";
    private string timein = "";
    private string timeout = "";

    void Cancel() => MudDialog.Cancel();


    private async Task ConfirmCreateSchedule()
    {
        MudDialog.Close();

        if (string.IsNullOrWhiteSpace(newSchedule) || string.IsNullOrWhiteSpace(timein) || string.IsNullOrWhiteSpace(timeout))
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Warning",
                    Text = "Please fill up the fields!",
                    Icon = SweetAlertIcon.Warning
                });
        }
        else
        {
            var confirmResult = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Are you sure you want to add " + newSchedule + "?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });

            if (confirmResult.IsConfirmed)
            {
                string strTimein = DateTime.Parse(timein).ToString(@"hh\:mm tt");
                string strTimeout = DateTime.Parse(timeout).ToString(@"hh\:mm tt");
                await ScheduleService.CreateSchedule(newSchedule, strTimein, strTimeout);
                newSchedule = "";

                _toastService.ShowSuccess(newSchedule + " Created Successfully!");

                await Task.Delay(1000);

                await jsRuntime.InvokeVoidAsync("location.reload");
                NavigationManager.NavigateTo("/schedule");
            }
        }
    }

}
