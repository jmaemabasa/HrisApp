@using System.Globalization;
@inject SweetAlertService Swal
@inject IScheduleService ScheduleService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject IToastService _toastService

<MudDialog>
    <DialogContent>
        <MudTextField Label="Schedule Type" @bind-Value="schedule.Name" Variant="Variant.Outlined" Style="margin-bottom:10px;" />
        <MudTextField Label="Time-in" InputType="InputType.Time" @bind-Value="schedule.TimeIn" Variant="Variant.Outlined" Style="margin-bottom:10px;" />
        <MudTextField Label="Time-out" InputType="InputType.Time" @bind-Value="schedule.TimeOut" Variant="Variant.Outlined" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="UpdateArea">Save</MudButton>
    </DialogActions>
</MudDialog>


@code {
    #nullable disable
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public int Id { get; set; }


    private ScheduleTypeT schedule = null;

    void Cancel() => MudDialog.Cancel();


    protected override async Task OnParametersSetAsync()
    {
        schedule = ScheduleService.ScheduleTs.Find(d => d.Id == Id);
    }

    async Task UpdateArea()
    {
        if (schedule == null)
            return;

        MudDialog.Close();

        var confirmResult = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to update the " + schedule.Name + "?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });

        if (confirmResult.IsConfirmed)
        {
            await ScheduleService.UpdateSchedule(schedule);

            _toastService.ShowSuccess(schedule.Name + " Updated Successfully!");
            await Task.Delay(1000);

            await jsRuntime.InvokeVoidAsync("location.reload");
            NavigationManager.NavigateTo("/schedule");

        }
    }
}
