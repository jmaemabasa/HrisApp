<MudDialog>
    <DialogContent>
        @if (!isShowUpdate)
        {
            <div class="row">
                <div class="d-flex justify-content-between align-items-center">
                    @if (FromPage == "Announcement")
                    {
                        <span class="diatitle">Announcement</span>
                        <AuthorizeView Roles="CadAdmin, SysAdmin, HR">
                            <Authorized>
                                <MudTooltip Text="Update">
                                    <MudIconButton OnClick="UpdateClick" Icon="@Icons.Material.Rounded.Edit" aria-label="update" Style="color:#27374D" />
                                </MudTooltip>
                            </Authorized>
                        </AuthorizeView>
                    }
                    else
                    {
                        <div class="diatitle" style="margin-top: 10px;">Announcement</div>
                    }
                </div>
                <div>
                    <MudDivider Class="my-3" />
                </div>
                <div class="col-12  mb-2  d-flex flex-column">
                    <span class="title">Duration</span>
                    @if (obj.DateStart != null)
                    {
                        @if ((obj.DateStart.Value.Date == DateTime.Now.Date && obj.DateEnd!.Value.Date >= DateTime.Now.Date)
                       || (obj.DateStart.Value.Date <= DateTime.Now.Date && obj.DateEnd!.Value.Date >= DateTime.Now.Date))
                        {
                            <span class="announceShow">@obj.DateStart?.ToString("MMM dd") - @obj.DateEnd?.ToString("MMM dd")</span>
                        }
                        else if (obj.DateStart.Value.Date > DateTime.Now.Date)
                        {
                            <span class="announcePending">@obj.DateStart?.ToString("MMM dd") - @obj.DateEnd?.ToString("MMM dd")</span>
                        }
                        else
                        {
                            <span class="announceNotShow">@obj.DateStart?.ToString("MMM dd") - @obj.DateEnd?.ToString("MMM dd")</span>
                        }
                    }
                </div>
                <div class="col-12 mb-2 d-flex flex-column">
                    <span class="title">Title</span>
                    <span class="obj">@obj.Ann_Title</span>
                </div>
                <div class="col-12  mb-2  d-flex flex-column" style="text-align: justify; text-justify: inter-word; white-space: pre-line;">
                    <span class="title">Description</span>
                    <span class="desc">@obj.Ann_Desc</span>
                </div>

                <div>
                    <MudDivider Class="mt-3 mb-1" />
                </div>
            </div>
        }

        @if (isShowUpdate)
        {
            <div class="row">
                <div class="d-flex justify-content-between align-items-center mt-2">
                    <span class="diatitle">Update Announcement</span>
                </div>

                <div>
                    <MudDivider Class="my-3" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">Title</MudText>
                    <MudTextField @bind-Value="obj.Ann_Title" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 5px;" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">Description</MudText>
                    <MudTextField @bind-Value="obj.Ann_Desc" Lines="15" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 5px;" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">Start Date</MudText>
                    <MudDatePicker @bind-Date="obj.DateStart" Placeholder="Select Date" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 5px;" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">End Date</MudText>
                    <MudDatePicker @bind-Date="obj.DateEnd" Placeholder="Select Date" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 10px;" />
                </div>

                <div>
                    <MudDivider Class="mt-3 mb-1" />
                </div>
            </div>
        }
    </DialogContent>
    <DialogActions>
        <div class="d-flex align-items-center" style="padding: 0px 16px; margin-bottom: 10px;">
            @if (isShowUpdate)
            {
                <MudButton Class="btn btncancel" OnClick="Cancel">Cancel</MudButton>
                <MudButton Class="btn btnsave" OnClick="ConfirmUpdate">Save</MudButton>
            }
            else
            {
                <MudButton Class="btn btncancel" OnClick="Cancel">Cancel</MudButton>
            }
        </div>
    </DialogActions>
</MudDialog>

@code {
#nullable disable

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int Id { get; set; }
    [Parameter] public string FromPage { get; set; }

    private AnnouncementT obj = new();

    private bool isShowUpdate;

    protected override async Task OnParametersSetAsync()
    {
        obj = await AnnouncementService.GetSingleAnnouncement((int)Id);
    }


    void Cancel() => MudDialog.Cancel();

    private void UpdateClick()
    {
        isShowUpdate = true;
    }

    private async Task ConfirmUpdate()
    {
        obj.DateStart = obj.DateStart.Value.Date + DateTime.Now.TimeOfDay;
        await AnnouncementService.UpdateAnnouncement(obj);

        await AuditlogService.CreateLog(Int32.Parse(GlobalConfigService.User_Id), "UPDATE", "Model", DateTime.Now);
        obj = await AnnouncementService.GetSingleAnnouncement((int)Id);

        isShowUpdate = false;
        await AnnouncementService.GetAnnouncement();
        var _announceList = AnnouncementService.AnnouncementTs.OrderBy(a => a.DateStart).ToList();

        // Then, reorder announcements based on their date ranges
        var currentTime = DateTime.Now;

        var currentAnnouncements = _announceList.Where(a => a.DateStart <= currentTime && a.DateEnd >= currentTime).ToList();
        var upcomingAnnouncements = _announceList.Where(a => a.DateStart > currentTime).ToList();
        var pastAnnouncements = _announceList.Where(a => a.DateEnd < currentTime).ToList();

        // Concatenate the sorted announcement lists
        _announceList = currentAnnouncements.Concat(upcomingAnnouncements).Concat(pastAnnouncements).ToList();
        StateService.SetState("AnnouncementList", _announceList);
    }
}
