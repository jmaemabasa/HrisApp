<MudDialog>
    <DialogContent>
        <EditForm Model="@obj" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-12">
                    <MudText Typo="Typo.body2">Title</MudText>
                    <MudTextField @bind-Value="obj.Ann_Title" For="@(() => obj.Ann_Title)" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 5px;" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">Description</MudText>
                    <MudTextField @bind-Value="obj.Ann_Desc" For="@(() => obj.Ann_Desc)" Lines="15" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 5px;" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">Start Date</MudText>
                    <MudDatePicker @bind-Date="obj.DateStart" For="@(() => obj.DateStart)" Placeholder="Enter Date" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 5px;" />
                </div>
                <div class="col-12">
                    <MudText Typo="Typo.body2">End Date</MudText>
                    <MudDatePicker @bind-Date="obj.DateEnd" For="@(() => obj.DateEnd)" Placeholder="Enter Date" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom: 10px;" />
                </div>

                <div class="d-flex justify-content-end align-items-center gap-2 mt-4 mb-3">
                    <MudButton Class="btn btncancel" OnClick="Cancel">Cancel</MudButton>
                    <MudButton Class="btn btnsave" ButtonType="ButtonType.Submit">Save</MudButton>
                </div>
            </div>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
#nullable disable

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private AnnouncementT obj = new();


    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        obj.DateStart = DateTime.Now;
    }

    private async void OnValidSubmit(EditContext context)
    {
        StateHasChanged();

        await ConfirmCreate();
        await AuditlogService.CreateLog(Int32.Parse(GlobalConfigService.User_Id), "CREATE", "Model", DateTime.Now);
    }

    private async Task ConfirmCreate()
    {
        obj.DateStart = obj.DateStart.Value.Date + DateTime.Now.TimeOfDay;
        await AnnouncementService.CreateAnnouncement(obj);

        MudDialog.Close();
        await AnnouncementService.GetAnnouncement();
        var _announceList = AnnouncementService.AnnouncementTs.OrderBy(a => a.DateStart).ToList();

        // Then, reorder announcements based on their date ranges
        var currentTime = DateTime.Now;

        var currentAnnouncements = _announceList.Where(a => a.DateStart <= currentTime && a.DateEnd >= currentTime).ToList();
        var upcomingAnnouncements = _announceList.Where(a => a.DateStart > currentTime).ToList();
        var pastAnnouncements = _announceList.Where(a => a.DateEnd < currentTime).ToList();

        // Concatenate the sorted announcement lists
        _announceList = currentAnnouncements.Concat(upcomingAnnouncements).Concat(pastAnnouncements).ToList();
        StateService.SetState("AnnouncementList", _announceList);
    }
}
