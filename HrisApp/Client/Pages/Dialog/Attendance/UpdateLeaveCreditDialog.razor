@inject ILeaveCredService LeaveCredService
@inject IDialogService _dialogService
@inject SweetAlertService Swal
@inject GlobalConfigService GlobalConfigService
@inject IAuditlogService AuditlogService
@inject IToastService _toastService
@inject StateService StateService


<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column">
            <span style="font-size: 16px; color: #E38D0F"><b>Statistical Rule</b></span>
            <div>
                <MudText Typo="Typo.body2">Emergency</MudText>
                <MudNumericField @bind-Value="obj.EL" Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>
            <div>
                <MudText Typo="Typo.body2">Maternity</MudText>
                <MudNumericField @bind-Value="obj.ML" Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>
            <div>
                <MudText Typo="Typo.body2">Paternity</MudText>
                <MudNumericField @bind-Value="obj.PL" Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>
            <div>
                <MudText Typo="Typo.body2">Sick</MudText>
                <MudNumericField @bind-Value="obj.SL" Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>
            <div>
                <MudText Typo="Typo.body2">Vacation</MudText>
                <MudNumericField @bind-Value="obj.VL" Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>
            <div>
                <MudText Typo="Typo.body2">Other</MudText>
                <MudNumericField @bind-Value="obj.OL" Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>

        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" @onclick="UpdateLeave">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public int Id { get; set; }

    private Emp_LeaveCreditT obj = new();

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnParametersSetAsync()
    {
        obj = await LeaveCredService.GetSingleLeaveCred((int)Id);
    }

    async Task UpdateLeave()
    {
        if (obj == null)
            return;

        if (string.IsNullOrWhiteSpace(obj.Verify_Id))
        {
            await ShowErrorMessageBox("Please fill up the name!");
        }
        else
        {
            MudDialog.Close();
            var confirmResult = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Are you sure you want to update?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });

            if (confirmResult.IsConfirmed)
            {
                await LeaveCredService.UpdateLeaveCred(obj);
                await AuditlogService.CreateLog(Int32.Parse(GlobalConfigService.User_Id), "UPDATE", "Content", DateTime.Now);

                _toastService.ShowSuccess("Updated Successfully!");
            }
        }
    }
    private async Task ShowErrorMessageBox(string mess)
    {
        bool? result = await _dialogService.ShowMessageBox(
        "Warning",
        mess,
        yesText: "Ok");
    }
}
