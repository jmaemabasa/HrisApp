@inject ILeaveService LeaveService
@inject ILeaveHistoryService LeaveHistoryService
@inject IDialogService _dialogService
@inject SweetAlertService Swal
@inject GlobalConfigService GlobalConfigService
@inject IAuditlogService AuditlogService
@inject IToastService _toastService
@inject StateService StateService

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column">
            <span style="font-size: 16px; color: #E38D0F; margin-bottom: 10px;"><b>Leave Form</b></span>

            <div>
                <MudText Typo="Typo.body2">Leave Type</MudText>
                <MudSelect @bind-Value="newLeaveType" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom:10px;">
                    @foreach (var item in leavelist)
                    {
                        <MudSelectItem Value="@item.Name">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div>
                <MudText Typo="Typo.body2">From:</MudText>
                <MudDatePicker @bind-Date="newfrom" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom:10px;" />
            </div>
            <div>
                <MudText Typo="Typo.body2">To:</MudText>
                <MudDatePicker DateChanged="HandleDateToChanged" Date="newto" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin-bottom:10px;" />
            </div>
            <div>
                <MudText Typo="Typo.body2">No. of Days:</MudText>
                <MudNumericField @bind-Value="noofdays" ReadOnly=true Variant="Variant.Outlined" Min="1" Style="margin-bottom:10px;" Margin="Margin.Dense" />
            </div>
            <div>
                <MudText Typo="Typo.body2">Purpose</MudText>
                <MudTextField @bind-Value="newpurpose" Variant="Variant.Outlined" Style="margin-bottom:10px;" Lines=2 Margin="Margin.Dense"></MudTextField>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" @onclick="ConfirmCreateLeave">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string verifyId { get; set; }

    public string newLeaveType = "--Select Leave Type--";
    public string newpurpose = "";
    public DateTime? newfrom = DateTime.Today;
    public DateTime? newto = DateTime.Today;
    public int noofdays;

    private Emp_LeaveHistoryT obj = new();
    public List<LeaveTypesT> leavelist = new();

    void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await LeaveService.GetLeave();
        leavelist = LeaveService.LeaveTypesTs;
    }


    private async Task ConfirmCreateLeave()
    {
        if (newLeaveType == "--Select Leave Type--")
        {
            await ShowErrorMessageBox("Please select leave type!");
        }
        else if (string.IsNullOrWhiteSpace(newpurpose))
        {
            await ShowErrorMessageBox("Please fill up the purpose!");
        }
        else
        {
            MudDialog.Close();
            var confirmResult = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Confirmation",
                    Text = "Are you sure you want to add " + newLeaveType + "?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });

            if (confirmResult.IsConfirmed)
            {
                await LeaveHistoryService.CreateLeaveHistory(verifyId, newLeaveType, newfrom, newto, noofdays, newpurpose);

                await AuditlogService.CreateLog(Int32.Parse(GlobalConfigService.User_Id), "CREATE", "Model", DateTime.Now);

                _toastService.ShowSuccess(newLeaveType + " Created Successfully!");

                // Update the areaList using the StateService
                await LeaveService.GetLeave();
                var newList = LeaveService.LeaveTypesTs;
                StateService.SetState("LeaveList", newList);
            }
        }
    }
    private async Task ShowErrorMessageBox(string mess)
    {
        bool? result = await _dialogService.ShowMessageBox(
        "Warning",
        mess,
        yesText: "Ok");
    }

    public void HandleDateToChanged(DateTime? newDate)
    {
        newto = newDate;

        TimeSpan? duration = newto - newfrom;

        if (duration.HasValue)
        {
            noofdays = duration.Value.Days + 1;
        }
        else
        {
            Console.WriteLine();
        }
    }
}
