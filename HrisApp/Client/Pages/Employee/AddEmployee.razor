@page "/employee/add"
@inject IDivisionService DivisionService
@inject IDepartmentService DepartmentService
@inject ISectionService SectionService
@inject IPositionService PositionService
@inject IAddressService AddressService
@inject IAreaService AreaService
@inject IEmployeeService EmployeeService
@inject IToastService _toastService
@inject IImageService ImageService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

<style>
    .mud-tab.mud-tab-active {
        color: #01579B;
        font-weight: bold;
    }

    .mud-tabs-toolbar-content {
        background: #e9ecef;
        color: #78909C;
    }

   
</style>

<div class="tabdiv">
    <MudButton Class="button" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" @onclick="CreateEmployee" StartIcon="@Icons.Material.Filled.PersonAdd" Style="text-transform: none; position: absolute;left: 90%; z-index:10;top: 70px;">Create User</MudButton>
    <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

        @* ====================================================================================  JOB  ==================================================================================== *@
        <MudTabPanel Class="tabx" Text="Step 1" Icon="@Icons.Material.Rounded.LabelImportant">
            <MudGrid>
                <MudItem xs="12" lg="2">
                    <span class="spantitle mb-3">Image</span>
                    @if (imgBase64 == "./images/addIconImage.png")
                    {
                        <MudFileUpload T="IBrowserFile" OnFilesChanged="uploadImage" Accept="image/*" capture Style="margin-top: 35px">
                            <ButtonTemplate>
                                <MudButton Class="w-100 btnimage" DisableElevation HtmlTag="label" Variant="Variant.Outlined" for="@context">
                                    <div style="height: 240px; display: flex; justify-content: center; align-items: center; ">
                                        <MudImage Src="@imgBase64" Style="height: 100px; width: 100px; " />
                                    </div>
                                </MudButton>
                            </ButtonTemplate>
                         </MudFileUpload>
                    }
                    else
                    {
                        <MudFileUpload T="IBrowserFile" OnFilesChanged="uploadImage" Accept="image/*" capture Style="margin-top: 35px">
                            <ButtonTemplate>
                                <MudButton Class="w-100 btnimagewithimage" DisableElevation HtmlTag="label" for="@context">
                                     <div style="height: 240px; display: flex; justify-content: center; align-items: center;  border-radius: 20px; padding:10px 0 10px 0">
                                         <MudImage Src="@imgBase64" Style="height: 95%; width: auto; max-width:100%; border-radius: 20px; border: none; " />
                                     </div>
                                 </MudButton>
                             </ButtonTemplate>
                         </MudFileUpload>
                    }
                </MudItem>
                <MudItem xs="12" lg="9">
                    <span class="spantitle">Basic Fields</span>
                    <MudCard Class="mdcard1 lfmargin" Elevation="0">
                        <MudCardContent>
                            <MudInputLabel>First Name</MudInputLabel>
                            <MudStack Row="true" Class="mb-1">
                                <MudItem xs="12"><MudTextField Class="txf" @bind-Value="employee.FirstName" For="() => employee.FirstName" DisableUnderLine Margin="Margin.Dense" /></MudItem>
                            </MudStack>
                            <MudInputLabel>Middle Name</MudInputLabel>
                            <MudStack Row="true" Class="mb-1">
                                <MudItem xs="12"><MudTextField Class="txf" @bind-Value="employee.MiddleName" DisableUnderLine Margin="Margin.Dense" /></MudItem>
                            </MudStack>
                             <MudInputLabel>Last Name</MudInputLabel>
                            <MudStack Row="true" Class="mb-1">
                                <MudItem xs="12"><MudTextField Class="txf" @bind-Value="employee.LastName" DisableUnderLine Margin="Margin.Dense" /></MudItem>
                            </MudStack>
                            <MudInputLabel>Email</MudInputLabel>
                            <MudStack Row="true" Class="mb-1">
                                 <MudItem xs="12">
                                     <MudTextField Class="txf" @bind-Value="employee.Email" DisableUnderLine Margin="Margin.Dense" />
                                </MudItem>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" Class="mt-3">
                    <span class="spantitle">Work Information</span>
                     <MudCard Class="mdcard1" Elevation="0">
                         <MudCardContent>
                             <div class="d-flex flex-column flex-grow-1 mb-3">
                                 <div class="d-flex flex-wrap gap-lg-3 gap-sm-2">
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Company ID No.</MudInputLabel>
                                         <MudTextField Class="txf" @bind-Value="employee.EmployeeNo" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Area of Assignment</MudInputLabel>
                                         <MudSelect Class="frmselect" @bind-Value="employee.AreaId" DisableUnderLine Margin="Margin.Dense">
                                             <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                            @foreach (var area in AreasL)
                                            {
                                                <MudSelectItem Value="@area.Id">@area.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                     </div>
                                    <div class="flex-grow-1">
                                        <MudInputLabel>Status</MudInputLabel>
                                        <MudSelect Class="frmselect" @bind-Value="employee.StatusId" DisableUnderLine Margin="Margin.Dense">
                                             <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                            @foreach (var status in StatusL.Where(s => s.Id == 1))
                                            {
                                                <MudSelectItem Value="@status.Id">@status.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                     </div>
                                 </div>
                             </div>
                            <div class="d-flex flex-column flex-grow-1 mb-3">
                                    <div class="d-flex flex-wrap gap-lg-3 gap-sm-2">
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Employment Status</MudInputLabel>
                                            <MudSelect Class="frmselect" @bind-Value="employee.EmploymentStatusId"   
                                                DisableUnderLine
                                             Margin="Margin.Dense">
                                                 <MudSelectItem Value=0   
                                                    Disabled
                                                 >---Select---</MudSelectItem>
                                                 @foreach (var status in EmploymentStatusL)
                                                {
                                                    <MudSelectItem Value="@status.Id">@status.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        @if (employee.EmploymentStatusId == 1)
                                        {
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker Class="txf" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy"   
                                                    DisableUnderLine
                                                 Editable="true" Date="DateHired" DateChanged="HandleDateHiredChanged" Margin="Margin.Dense" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Regularization Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker Class="txf" @bind-Date="RegularDate" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" DisableUnderLine Editable="true" Margin="Margin.Dense"/>
                                             </div>
                                        }
                                        else if (employee.EmploymentStatusId == 2) {
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf"      DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Probation Start Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker DateChanged="HandleDateHiredChanged" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Date="ProbStart" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Probation End Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="ProbEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                        }
                                        else if (employee.EmploymentStatusId == 3) {
                                            <div class="flex-grow-1">
                                            <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                            <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Casual Start Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="CasualStart" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Casual End Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="CasualEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                        }
                                        else if (employee.EmploymentStatusId == 4) {
                                            <div class="flex-grow-1">
                                                 <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                            <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Fixed Term Start Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="FixedStart" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Fixed Term End Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="FixedEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                        }
                                        else if (employee.EmploymentStatusId == 5) {
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Project Based Start Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="ProjStart" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Project Based End Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="ProjEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                            </div>
                                        }
                                        else
                                        {
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                             <MudDatePicker Class="txf" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Disabled DisableUnderLine Editable="true" Date="DateHired" DateChanged="HandleDateHiredChanged" Margin="Margin.Dense" />
                                         </div>
                                         <div class="flex-grow-1">
                                            <MudInputLabel>Regularization Date (mm/dd/yyyy)</MudInputLabel>
                                            <MudDatePicker Class="txf" @bind-Date="RegularDate" Mask="@(new DateMask("MM/dd/yyyy"))" Disabled DateFormat="MM/dd/yyyy" DisableUnderLine Editable="true" Margin="Margin.Dense" />
                                         </div>
                                        }
                                </div>
                             </div>
                            <div class="d-flex flex-column flex-grow-1 mb-3">
                                <div class="d-flex flex-wrap gap-lg-3 gap-sm-2">
                                    @{
                                        var departmentHasSection = employee.DepartmentId != 0 && SectionService.SectionTs.Any(s => s.DepartmentId == employee.DepartmentId);
                                    }
                                    @if (departmentHasSection)
                                    {
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Division</MudInputLabel>
                                            <MudSelect Class="frmselect" DisableUnderLine @bind-Value="employee.DivisionId" Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                             @foreach (var div in DivisionsL)
                                                {
                                                    <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Department</MudInputLabel>
                                            <MudSelect Class="frmselect" DisableUnderLine @bind-Value="employee.DepartmentId" Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                             @foreach (var dep in DepartmentsL.Where(d => d.DivisionId == employee.DivisionId))
                                                {
                                                    <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        @if (departmentHasSection)
                                        {
                                            var sections = employee.DepartmentId != 0 ? SectionService.SectionTs.Where(s => s.DepartmentId == employee.DepartmentId) : Enumerable.Empty<SectionT>();
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Section</MudInputLabel>
                                                <MudSelect Class="frmselect" DisableUnderLine @bind-Value="employee.SectionId" Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @if (sections.Any())
                                                    {
                                                        @foreach (var sect in sections)
                                                        {
                                                            <MudSelectItem Value="@sect.Id">@sect.Name</MudSelectItem>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <MudSelectItem Value="0">&nbsp;</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Position</MudInputLabel>
                                                <MudSelect Class="frmselect" DisableUnderLine @bind-Value="employee.PositionId" Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @foreach (var dep in PositionsL.Where(d => d.DivisionId == employee.DivisionId && d.DepartmentId == employee.DepartmentId && d.SectionId == employee.SectionId))
                                                    {
                                                        <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                        }
                                    }
                                    else {
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Division</MudInputLabel>
                                            <MudSelect @bind-Value="employee.DivisionId" Class="frmselect" DisableUnderLine Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                             @foreach (var div in DivisionsL)
                                                {
                                                    <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Department</MudInputLabel>
                                            <MudSelect @bind-Value="employee.DepartmentId" Class="frmselect" DisableUnderLine Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                             @foreach (var dep in DepartmentsL.Where(d => d.DivisionId == employee.DivisionId))
                                                {
                                                    <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Position</MudInputLabel>
                                            <MudSelect @bind-Value="employee.PositionId" Class="frmselect" DisableUnderLine Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                             @foreach (var dep in PositionsL.Where(d => d.DepartmentId == employee.DepartmentId))
                                                {
                                                    <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                    }
                                   
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        @* ====================================================================================  PERSONAL  ==================================================================================== *@

        <MudTabPanel Class="tabx" Text="Step 2" Icon="@Icons.Material.Rounded.LabelImportant">
            <MudGrid>
                <MudItem xs="12" >
                    <span class="spantitle">Personal Details</span>
                     <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>
                             <div class="d-flex flex-column flex-grow-1 mb-3">
                                <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                    <div class="flex-grow-1">
                                        <MudInputLabel>First Name</MudInputLabel>
                                        <MudTextField Class="txf" DisableUnderLine @bind-Value="employee.FirstName" Margin="Margin.Dense" />
                                    </div>
                                    <div class="flex-grow-1">
                                         <MudInputLabel>Middle Name</MudInputLabel>
                                         <MudTextField Class="txf" DisableUnderLine @bind-Value="employee.MiddleName" Margin="Margin.Dense" />
                                    </div>
                                    <div class="flex-grow-1">
                                         <MudInputLabel>Last Name</MudInputLabel>
                                         <MudTextField Class="txf" DisableUnderLine @bind-Value="employee.LastName" Margin="Margin.Dense" />
                                    </div>
                                     <div class="flex-grow-1 flex-lg-grow-0 ">
                                         <MudInputLabel>Extension</MudInputLabel>
                                         <MudTextField Class="txf" DisableUnderLine @bind-Value="employee.Extension" Margin="Margin.Dense" />
                                    </div>
                                </div>
                                 <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                     <div class="wautobox" style="width: 468px;">
                                         <MudInputLabel>Birthdate (mm/dd/yyyy)</MudInputLabel>
                                         <MudDatePicker Class="txf" DisableUnderLine @bind-Date="bday" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Margin="Margin.Dense" />
                                     </div>
                                     <div class="wautobox" style="width: 468px;">
                                         <MudInputLabel>Age</MudInputLabel>
                                         <MudTextField Class="txf" DisableUnderLine Value="@CalculateAge(bday)" Disabled Margin="Margin.Dense" />
                                     </div>
                                     <div class="wautobox" style="width: 468px;">
                                         <MudInputLabel>Gender</MudInputLabel>
                                         <MudSelect Class="frmselect" DisableUnderLine @bind-Value="employee.GenderId" Margin="Margin.Dense">
                                             <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                            @foreach (var gender in GendersL)
                                            {
                                                <MudSelectItem Value="@gender.Id">@gender.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                     </div>
                                 </div>
                                  <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                    <div class="wautobox" style="width: 468px;">
                                        <MudInputLabel>Civil Status</MudInputLabel>
                                        <MudSelect Class="frmselect" @bind-Value="employee.CivilStatusId" DisableUnderLine Margin="Margin.Dense">
                                            <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                            @foreach (var cs in CivilStatusL)
                                            {
                                                <MudSelectItem Value="@cs.Id">@cs.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </div>
                                     <div class="wautobox" style="width: 468px;">
                                        <MudInputLabel>Nationality</MudInputLabel>
                                        <MudTextField @bind-Value="employee.Nationality" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                    </div>
                                     <div class="wautobox" style="width: 468px;">
                                         <MudInputLabel>Religion</MudInputLabel>
                                         <MudSelect @bind-Value="employee.ReligionId" Class="frmselect" DisableUnderLine Margin="Margin.Dense">
                                            <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                            @foreach (var rel in ReligionsL)
                                            {
                                                <MudSelectItem Value="@rel.Id">@rel.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                     </div>
                                </div>
                                 <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                      <div class="wautobox" style="width: 468px;">
                                        <MudInputLabel>Mobile #</MudInputLabel>
                                        <MudTextField @bind-Value="employee.MobileNumber" Class="txf" DisableUnderLine Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentText="+63" MaxLength="10" For="@(() => employee.MobileNumber)" />
                                     </div>
                                     <div class="wautobox" style="width: 468px;">
                                         <MudInputLabel>Weight(kg)</MudInputLabel>
                                        <MudTextField @bind-Value="employee.Weight" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="wautobox" style="width: 468px;">
                                         <MudInputLabel>Height(cm)</MudInputLabel>
                                         <MudTextField @bind-Value="employee.Height" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                             </div>
                        </MudCardContent>
                     </MudCard>
                </MudItem>
                 <MudItem xs="12">
                     <div class="d-flex flex-grow-1 justify-content-center">
                         <MudDivider DividerType="DividerType.Middle" Class="my-2 w-25 justify-content-center" Style="border: 2px solid #78909C; border-radius: 5px;" />
                     </div>
                </MudItem>
                <MudItem xs="12">
                    <span class="spantitle">Address</span>
                     <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>
                            <span class="spantitle">Present Address</span>
                            <div class="d-flex flex-column flex-grow-1 mb-3">
                                <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                    <div class="flex-grow-1">
                                         <MudInputLabel>(Unit/House/Building/Street Number, Street Name, Barangay Name)</MudInputLabel>
                                         <MudTextField @bind-Value="address.CurrentAdd" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                    </div>
                                </div>
                                 <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                     <div class="flex-grow-1">
                                          <MudInputLabel>City</MudInputLabel>
                                          <MudTextField @bind-Value="address.CurrentCity" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                      <div class="flex-grow-1">
                                          <MudInputLabel>Province</MudInputLabel>
                                           <MudTextField @bind-Value="address.CurrentProvince" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                      <div class="flex-grow-1">
                                         <MudInputLabel>ZipCode</MudInputLabel>
                                           <MudTextField @bind-Value="address.CurrentZipCode" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Country</MudInputLabel>
                                         <MudTextField @bind-Value="address.CurrentCountry" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                                 <span class="spantitle">Permanent Address</span>
                                 <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                     <div class="flex-grow-1">
                                         <MudInputLabel>(Unit/House/Building/Street Number, Street Name, Barangay Name)</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentAdd" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                                 <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                     <div class="flex-grow-1">
                                         <MudInputLabel>City</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentCity" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Province</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentProvince" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                        <MudInputLabel>ZipCode</MudInputLabel>
                                           <MudTextField @bind-Value="address.PermanentZipCode" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Country</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentCountry" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                            </div>
                            
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                 <MudItem xs="12">
                     <div class="d-flex flex-grow-1 justify-content-center">
                         <MudDivider DividerType="DividerType.Middle" Class="my-2 w-25 justify-content-center" Style="border: 2px solid #78909C; border-radius: 5px;" />
                     </div>
                 </MudItem>
                <MudItem xs="12">
                    <span class="spantitle">Person to Notify in Case of Emergency</span>
                     <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1 mb-3">
                                <div class="d-flex flex-wrap gap-lg-3 gap-sm-2 mb-2">
                                    <div class="flex-grow-1">
                                         <MudInputLabel>Name</MudInputLabel>
                                         <MudTextField @bind-Value="employee.EmerName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                    </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Relationship</MudInputLabel>
                                         <MudSelect @bind-Value="employee.EmerRelationshipId" Class="frmselect" DisableUnderLine Margin="Margin.Dense">
                                             <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                            @foreach (var rel in EmerRelationshipsL)
                                            {
                                                <MudSelectItem Value="@rel.Id">@rel.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </div>
                                     <div class="flex-grow-1">
                                        <MudInputLabel>Address</MudInputLabel>
                                        <MudTextField @bind-Value="employee.EmerAddress" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                    </div>
                                     <div class="flex-grow-1">
                                        <MudInputLabel>Mobile #</MudInputLabel>
                                        <MudTextField @bind-Value="employee.EmerMobNum" Class="txf" DisableUnderLine Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentText="+63" MaxLength="10" For="@(() => employee.EmerMobNum)" />
                                     </div>
                                </div>
                            </div>
                            
                            
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>


        @* ====================================================================================  EDUCATION  ==================================================================================== *@

        <MudTabPanel Class="tabx" Text="Step 3" Icon="@Icons.Material.Rounded.LabelImportant">
            <MudGrid>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center">
                                    <span class="spantitle">Primary</span>
                                    <div>
                                        <MudTooltip  Text="Click to remove Primary">
                                            <MudIconButton Class="p-0" OnClick="RemovePrimary" Icon="@Icons.Material.Filled.RemoveCircle" />
                                        </MudTooltip>
                                        <MudTooltip Text="Click to add more Primary">
                                            <MudIconButton Class="p-0" OnClick="() => AddNewPrimary(employee.Verify_Id)" Icon="@Icons.Material.Filled.Add" />
                                        </MudTooltip>
                                    </div>  
                                </div>
                                @if (listOfPrimary.Any())
                                {
                                    @foreach (var pri in listOfPrimary)
                                    {
                                        <div class="mb-3">
                                            <div class="d-flex flex-wrap gap-2">
                                                <MudTextField @bind-Value="pri.PriSchoolName" Label="Name of School" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="pri.PriSchoolLoc" Label="School Location" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </div>
                                            <div class="d-flex flex-wrap gap-2">
                                                <MudTextField @bind-Value="pri.PriAward" Label="Award" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="pri.PriSchoolYear" Label="School Year" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </div>
                                        </div>
                                        
                                    }
                                }
                                else
                                {
                                    @foreach (var pri in listOfPrimary)
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Primary information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard>
                        <MudCardContent>       
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center">
                                    <span class="spantitle">Secondary</span>
                                    <div>
                                        <MudTooltip Text="Click to remove Secondary">
                                            <MudIconButton Class="p-0" OnClick="RemovePrimary" Icon="@Icons.Material.Filled.RemoveCircle" />
                                        </MudTooltip>
                                        <MudTooltip Text="Click to add more Secondary">
                                            <MudIconButton Class="p-0" OnClick="() => AddNewPrimary(employee.Verify_Id)" Icon="@Icons.Material.Filled.Add" />
                                        </MudTooltip>
                                    </div>
                                </div>
                                @if (listOfPrimary.Any())
                                {
                                    @foreach (var pri in listOfPrimary)
                                    {
                                        <div class="mb-3">
                                            <div class="d-flex flex-wrap gap-2">
                                                <MudTextField @bind-Value="pri.PriSchoolName" Label="Name of School" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="pri.PriSchoolLoc" Label="School Location" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </div>
                                            <div class="d-flex flex-wrap gap-2">
                                                <MudTextField @bind-Value="pri.PriAward" Label="Award" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                                <MudTextField @bind-Value="pri.PriSchoolYear" Label="School Year" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                            </div>
                                        </div>

                                    }
                                }
                                else
                                {
                                    @foreach (var pri in listOfPrimary)
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Primary information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        @* ====================================================================================  LICENCE  ==================================================================================== *@

        <MudTabPanel Class="tabx" Text="Step 4" Icon="@Icons.Material.Rounded.LabelImportant">
            <MudText>Content Three</MudText>
        </MudTabPanel>

        @* ====================================================================================  PAYROLL  ==================================================================================== *@

        <MudTabPanel Class="tabx" Text="Step 5" Icon="@Icons.Material.Rounded.LabelImportant">
            <MudText>Content Three</MudText>
        </MudTabPanel>
    </MudTabs>
</div>

@code {

    #nullable disable

    EmployeeT employee = new();
    AddressT address = new();

    bool success;

    //FK
    private List<AreaT> AreasL = new List<AreaT>();
    private List<StatusT> StatusL = new List<StatusT>();
    private List<EmploymentStatusT> EmploymentStatusL = new List<EmploymentStatusT>();

    private List<DivisionT> DivisionsL = new List<DivisionT>();
    private List<DepartmentT> DepartmentsL = new List<DepartmentT>();
    private List<SectionT> SectionsL = new List<SectionT>();
    private List<PositionT> PositionsL = new List<PositionT>();

    private List<GenderT> GendersL = new List<GenderT>();
    private List<CivilStatusT> CivilStatusL = new List<CivilStatusT>();
    private List<ReligionT> ReligionsL = new List<ReligionT>();
    private List<EmerRelationshipT> EmerRelationshipsL = new List<EmerRelationshipT>();

    List<CollegeT> listOfCollege = new();
    List<OtherEducT> listOfOthers = new();
    List<SecondaryT> listOfSecondary = new();
    List<DoctorateT> listOfDoctorate = new();
    List<PrimaryT> listOfPrimary = new();
    List<MasteralT> listOfMasteral = new();
    List<SeniorHST> listOfShs = new();


    string VerifyCode;

    private DateTime? bday { get; set; }
    private DateTime? Date = DateTime.Today;
    private DateTime? ResignationDate = DateTime.Today;
    private DateTime? ProbStart = DateTime.Today;
    private DateTime? ProbEnd = DateTime.Today;
    private DateTime? CasualStart = DateTime.Today;
    private DateTime? CasualEnd = DateTime.Today;
    private DateTime? FixedStart = DateTime.Today;
    private DateTime? FixedEnd = DateTime.Today;
    private DateTime? ProjStart = DateTime.Today;
    private DateTime? ProjEnd = DateTime.Today;
    private DateTime? DateHired = DateTime.Today;
    private DateTime? RegularDate = DateTime.Today;

    //attachment
    private string PDFBase64 { get; set; }
    private string PDFUrl { get; set; }
    private string PDFFileName { get; set; }
    private string PDFContentType { get; set; }
    private byte[] pdfData { get; set; }
    private bool pdfbool12 { get; set; }
    private bool PDFbool12 { get; set; }
    IList<IBrowserFile> pdffile = new List<IBrowserFile>();
    private List<MultipartFormDataContent> DocuEmployees = new List<MultipartFormDataContent>();

    //image
    private string imgBase64 { get; set; }
    private string ImageUrl { get; set; }
    private string ImgFileName { get; set; }
    private string ImgContentType { get; set; }
    private string verifyId { get; set; }

    MultipartFormDataContent EmpImage = new MultipartFormDataContent();
    IList<IBrowserFile> Imagesfile = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {
        await AreaService.GetAreaList();
        AreasL = AreaService.AreaTs;

        await EmployeeService.GetStatusList();
        StatusL = EmployeeService.StatusTs;

        await EmployeeService.GetEmploymentStatusList();
        EmploymentStatusL = EmployeeService.EmploymentStatusTs;

        await DivisionService.GetDivision();
        DivisionsL = DivisionService.DivisionTs;

        await DepartmentService.GetDepartment();
        DepartmentsL = DepartmentService.DepartmentTs;

        await SectionService.GetSection();
        SectionsL = SectionService.SectionTs;

        await PositionService.GetPosition();
        PositionsL = PositionService.PositionTs;

        await EmployeeService.GetGenderList();
        GendersL = EmployeeService.GenderTs;

        await EmployeeService.GetCivilStatusList();
        CivilStatusL = EmployeeService.CivilStatusTs;

        await EmployeeService.GetReligionList();
        ReligionsL = EmployeeService.ReligionTs;

        await EmployeeService.GetEmerRelationshipList();
        EmerRelationshipsL = EmployeeService.EmerRelationshipTs;

        imgBase64 = "./images/addIconImage.png";
    }

    private void HandleDateHiredChanged(DateTime? newDate)
    {
        DateHired = newDate;
        Console.WriteLine(DateHired.ToString());
        if (DateHired.HasValue)
        {
            // Calculate the regularization date, which is 6 months after the DateHired.

            switch (employee.EmploymentStatusId)
            {
                case 1:
                    RegularDate = DateHired.Value.AddMonths(6);
                    break;

                case 2:
                    ProbStart = newDate;
                    ProbEnd = ProbStart.Value.AddMonths(3);
                    Console.WriteLine(ProbStart.ToString());
                    break;
            }
        }
        else
        {
            // If DateHired is not set, clear RegularDate.
            RegularDate = null;
        }
    }

    private string CalculateAge(DateTime? selectedDate)
    {
        if (selectedDate.HasValue)
        {
            DateTime currentDate = DateTime.Today;
            int age = currentDate.Year - selectedDate.Value.Year;

            if (selectedDate.Value > currentDate.AddYears(-age))
                age--;

            return age.ToString();
        }

        return string.Empty;
    }
    async Task uploadImage(InputFileChangeEventArgs e)
    {
        long lngImage = long.MaxValue;
        var brwModel = e.File;
        var imgFilename = e.File.Name;
        var imgContent = e.File.ContentType;
        var imgBuffer = new byte[e.File.Size];
        var imgURL = $"data:{imgContent};base64,{Convert.ToBase64String(imgBuffer)}";

        using (var _stream = brwModel.OpenReadStream(lngImage))
        {
            await _stream.ReadAsync(imgBuffer);
        }

        if (e.File.Name is null)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "No image uploaded!",
                    Icon = SweetAlertIcon.Error
                });
            return;
        }
        else
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(brwModel.OpenReadStream(lngImage));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imgContent);

            ImageUrl = imgURL;
            ImgContentType = imgContent;
            ImgFileName = imgFilename;
            EmpImage.Add(content: fileContent, name: imgFilename, fileName: imgFilename);

            var base642 = Convert.ToBase64String(imgBuffer);
            imgBase64 = string.Format("data:image/*;base64,{0}", base642);
        }
    }

    async Task CreateEmployee()
    {
        try
        {
            if (bday.HasValue)
            {
                DateTime currentDate = DateTime.Today;
                int age = currentDate.Year - bday.Value.Year;

                if (bday.Value > currentDate.AddYears(-age))
                    age--;

                employee.Age = age;
            }

            Console.WriteLine("Saving Page");
            var verifyCode = DateTime.Now.ToString("yyyyMMddhhmmssfff");

            employee.Verify_Id = verifyCode;

            employee.Birthdate = Convert.ToDateTime(bday);
            employee.DateHired = Convert.ToDateTime(DateHired);

            if (!string.IsNullOrEmpty(employee.InactiveStatusId.ToString()))
            {
                employee.InactiveStatusId = 1;
            }

            var verifyId = await EmployeeService.CreateEmployee(employee);

            address.Verify_Id = verifyId;
            var adres = await AddressService.CreateAddress(address);

            var divisionString = employee.DivisionId;
            var divisionPDF = employee.DivisionId;

            var departmentString = employee.DepartmentId;
            var departmentPDF = employee.DepartmentId;

            await OnsavingImg(employee.EmployeeNo, divisionString, departmentString, employee.LastName, verifyId);
            await OnPDFSaving(employee.EmployeeNo, divisionPDF, departmentPDF, employee.LastName, verifyId);

            NavigationManager.NavigateTo("employee");

            var swal = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = "Created Successfully!",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnsavingImg(string EmployeeId, int division, int department, string lastname, string verify)
    {
        using var _contentImg = new MultipartFormDataContent();
        _contentImg.Add(EmpImage.LastOrDefault());
        await ImageService.AttachFile(_contentImg, EmployeeId, division, department, lastname, verify);
    }

    private async Task OnPDFSaving(string EmployeeId, int division, int department, string lastname, string verify)
    {
        Console.WriteLine($"EmployeeId: {EmployeeId}");
        Console.WriteLine($"division: {division}");
        Console.WriteLine($"department: {department}");
        Console.WriteLine($"lastname: {lastname}");
        Console.WriteLine($"verify: {verify}");

        foreach (var formdata in DocuEmployees)
        {
            await ImageService.AttachedFile(formdata, EmployeeId, division, department, lastname, verify);
        }
    }

    public void AddNewPrimary(string employeeVerifyId)
    {
        if (listOfPrimary.Count <= 4)
        {
            listOfPrimary.Add(new PrimaryT { Verify_Id = employee.Verify_Id });
        }
    }

    public void RemovePrimary()
    {
        if (listOfPrimary.Count > 0)
        {
            listOfPrimary.RemoveAt(listOfPrimary.Count - 1);
        }
    }
    public void AddNewSecondary(string employeeVerifyId)
    {
        if (listOfSecondary.Count <= 2)
        {
            listOfSecondary.Add(new SecondaryT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveSecondary()
    {
        if (listOfSecondary.Count <= 1) { }
        else
        {
            listOfSecondary.RemoveAt(listOfSecondary.Count - 1);
        }
    }

    public void AddNewShs(string employeeVerifyId)
    {
        if (listOfShs.Count <= 2)
        {
            listOfShs.Add(new SeniorHST { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveShs()
    {
        if (listOfShs.Count <= 1) { }
        else
        {
            listOfShs.RemoveAt(listOfShs.Count - 1);
        }
    }

    public void AddNewCollege(string employeeVerifyId)
    {
        if (listOfCollege.Count <= 2)
        {
            listOfCollege.Add(new CollegeT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveCollege()
    {
        if (listOfCollege.Count <= 1) { }
        else
        {
            listOfCollege.RemoveAt(listOfCollege.Count - 1);
        }
    }

    public void AddNewMasteral(string employeeVerifyId)
    {
        if (listOfMasteral.Count <= 2)
        {
            listOfMasteral.Add(new MasteralT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveMasteral()
    {
        if (listOfMasteral.Count <= 1) { }
        else
        {
            listOfMasteral.RemoveAt(listOfMasteral.Count - 1);
        }
    }

    public void AddNewDoctorate(string employeeVerifyId)
    {
        if (listOfDoctorate.Count <= 2)
        {
            listOfDoctorate.Add(new DoctorateT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveDoctorate()
    {
        if (listOfDoctorate.Count <= 1) { }
        else
        {
            listOfDoctorate.RemoveAt(listOfDoctorate.Count - 1);
        }
    }

    public void AddNewOthers(string employeeVerifyId)
    {
        if (listOfOthers.Count <= 4)
        {
            listOfOthers.Add(new OtherEducT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveOthers()
    {
        if (listOfOthers.Count <= 1) { }
        else
        {
            listOfOthers.RemoveAt(listOfOthers.Count - 1);
        }
    }
    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
