@page "/employee/add"
@using HrisApp.Shared.Models.LiscenseAndTraining;
@using System.Net.Http.Headers;
@using System.Security.Claims;
@inject IDivisionService DivisionService
@inject IDepartmentService DepartmentService
@inject ISectionService SectionService
@inject IPositionService PositionService
@inject IAddressService AddressService
@inject IAreaService AreaService
@inject IEmployeeService EmployeeService
@inject IToastService _toastService
@inject IImageService ImageService
@inject IEducationService EducationService
@inject IPayrollService PayrollService
@inject ILicenseTrainingService LicenseTrainingService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService _toastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<div class="topnav d-flex justify-content-end align-items-center z-60">
    <MudButton OnClick="backbtn" Size="Size.Medium">Back</MudButton>
</div>
<div class="tabdiv">
    <MudButton Class="button" ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" @onclick="CreateEmployee" StartIcon="@Icons.Material.Filled.PersonAdd" Style="text-transform: none; position: absolute;left: 90%; z-index:10;top: 70px;">Create User</MudButton>
    <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs" @bind-ActivePanelIndex="activeIndex" Centered=true >

        @* ====================================================================================  JOB  ==================================================================================== *@
        <MudTabPanel TabContent="tabHeader(0)">
            <MudGrid>                
                <MudItem xs="12" lg="2"  style="z-index: 99">
                    <span class="spantitle mb-3">Image</span>
                    @if (imgBase64 == "./images/addIconImage.png")
                    {
                        <MudFileUpload T="IBrowserFile" OnFilesChanged="uploadImage" Accept="image/*" capture Style="margin-top: 35px">
                            <ButtonTemplate>
                                <MudButton Class="w-100 btnimage" DisableElevation HtmlTag="label" Variant="Variant.Outlined" for="@context">
                                    <div style="height: 240px; display: flex; justify-content: center; align-items: center; ">
                                        <MudImage Src="@imgBase64" Style="height: 100px; width: 100px; " />
                                    </div>
                                </MudButton>
                            </ButtonTemplate>
                         </MudFileUpload>
                    }
                    else
                    {
                        <MudFileUpload T="IBrowserFile" OnFilesChanged="uploadImage" Accept="image/*" capture Style="margin-top: 35px">
                            <ButtonTemplate>
                                <MudButton Class="w-100 btnimagewithimage" DisableElevation HtmlTag="label" for="@context">
                                     <div style="height: 240px; display: flex; justify-content: center; align-items: center;  border-radius: 20px; padding:10px 0 10px 0">
                                         <MudImage Src="@imgBase64" Style="height: 95%; width: auto; max-width:100%; border-radius: 20px; border: none; " />
                                     </div>
                                 </MudButton>
                             </ButtonTemplate>
                         </MudFileUpload>
                    }
                </MudItem>
                <EditForm Model="employee" OnValidSubmit="() => Activate(1)" class="d-flex flex-column flex-grow-1" style="margin-top: 13px;">
                    <DataAnnotationsValidator />
                
                    <MudItem xs="12" Class="paddingitem">
                        <span class="spantitle">Personal Information</span>
                        <MudCard Class="mdcard1 lfmargin" Elevation="0">
                            <MudCardContent>
                                <MudInputLabel>First Name</MudInputLabel>
                                <MudStack Row="true" Class="mb-2">
                                     <MudItem xs="12"><InputText class="txf1 w-100" @bind-Value="employee.FirstName" /></MudItem>
                                </MudStack>
                                <ValidationMessage For="@(() => employee.FirstName)" class="mb-2"/>  
                                <MudInputLabel>Middle Name</MudInputLabel>
                                <MudStack Row="true" Class="mb-2">
                                    <MudItem xs="12"><InputText Class="txf1 w-100" @bind-Value="employee.MiddleName" /></MudItem>
                                </MudStack>
                                <ValidationMessage For="@(() => employee.MiddleName)" class="mb-2"/>  

                                 <MudInputLabel>Last Name</MudInputLabel>
                                <MudStack Row="true" Class="mb-2">
                                    <MudItem xs="12"><InputText Class="txf1 w-100" @bind-Value="employee.LastName" /></MudItem>
                                </MudStack>
                                <ValidationMessage For="@(() => employee.LastName)" class="mb-2"/>  

                                <MudInputLabel>Email</MudInputLabel>
                                <MudStack Row="true" Class="mb-2">
                                     <MudItem xs="12">
                                            <InputText Class="txf1 w-100" @bind-Value="employee.Email" />
                                    </MudItem>
                                </MudStack>
                                    <ValidationMessage For="@(() => employee.Email)" class="mb-2" />
                                </MudCardContent>
                        </MudCard>
                    </MudItem>
                        <MudItem xs="12" Class="mt-3 paddingitem" >
                        <span class="spantitle">Work Information</span>
                         <MudCard Class="mdcard1" Elevation="0">
                             <MudCardContent>
                                 <div class="d-flex flex-column flex-grow-1 mb-3">
                                     <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Company ID No.</MudInputLabel>
                                             <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.EmployeeNo" />
                                             <ValidationMessage For="@(() => employee.EmployeeNo)" class="mb-2" />
                                         </div>
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Area of Assignment</MudInputLabel>
                                                <MudSelect Class="@slectClasss" @bind-Value="employee.AreaId" DisableUnderLine Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var area in AreasL)
                                                {
                                                    <MudSelectItem Value="@area.Id">@area.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                                <ValidationMessage For="@(() => employee.AreaId)" class="mb-2" />
                                         </div>
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Status</MudInputLabel>
                                            <MudSelect Class="@slectClasss" @bind-Value="employee.StatusId" DisableUnderLine Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var status in StatusL.Where(s => s.Id == 1))
                                                {
                                                    <MudSelectItem Value="@status.Id">@status.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                             <ValidationMessage For="@(() => employee.StatusId)" class="mb-2" />
                                         </div>
                                     </div>
                                 </div>
                                <div class="d-flex flex-column flex-grow-1 mb-3">
                                        <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 align-items-center">
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Employment Status</MudInputLabel>
                                                <MudSelect Class="@slectClasss" @bind-Value="employee.EmploymentStatusId" DisableUnderLine Margin="Margin.Dense">
                                                     <MudSelectItem Value=0  Disabled >---Select---</MudSelectItem>
                                                     @foreach (var status in EmploymentStatusL)
                                                    {
                                                        <MudSelectItem Value="@status.Id">@status.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                                 <ValidationMessage For="@(() => employee.EmploymentStatusId)" class="mb-2" />
                                            </div>
                                            @if (employee.EmploymentStatusId == 1)
                                            {
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker Class="txf" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy"   
                                                        DisableUnderLine
                                                     Editable="true" Date="DateHired" DateChanged="HandleDateHiredChanged" Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>Regularization Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker Class="txf" @bind-Date="RegularDate" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" DisableUnderLine Editable="true" Margin="Margin.Dense"/>
                                                 </div>
                                            }
                                            else if (employee.EmploymentStatusId == 2) {
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf"      DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Probation Start Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker DateChanged="HandleDateHiredChanged" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Date="ProbStart" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Probation End Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="ProbEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                            }
                                            else if (employee.EmploymentStatusId == 3) {
                                                <div class="flex-grow-1">
                                                <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Casual Start Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="CasualStart" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Casual End Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="CasualEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                            }
                                            else if (employee.EmploymentStatusId == 4) {
                                                <div class="flex-grow-1">
                                                     <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Fixed Term Start Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="FixedStart" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Fixed Term End Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="FixedEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                            }
                                            else if (employee.EmploymentStatusId == 5) {
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="DateHired" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Project Based Start Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="ProjStart" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Project Based End Date (mm/dd/yyyy)</MudInputLabel>
                                                    <MudDatePicker @bind-Date="ProjEnd" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                            }
                                            else
                                            {
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Date Hired (mm/dd/yyyy)</MudInputLabel>
                                                 <MudDatePicker Class="txf" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Disabled DisableUnderLine Editable="true" Date="DateHired" DateChanged="HandleDateHiredChanged" Margin="Margin.Dense" />
                                             </div>
                                             <div class="flex-grow-1">
                                                <MudInputLabel>Regularization Date (mm/dd/yyyy)</MudInputLabel>
                                                <MudDatePicker Class="txf" @bind-Date="RegularDate" Mask="@(new DateMask("MM/dd/yyyy"))" Disabled DateFormat="MM/dd/yyyy" DisableUnderLine Editable="true" Margin="Margin.Dense" />
                                             </div>
                                            }
                                    </div>
                                 </div>
                                <div class="d-flex flex-column flex-grow-1 mb-3">
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                        @{
                                            var departmentHasSection = employee.DepartmentId != 0 && SectionService.SectionTs.Any(s => s.DepartmentId == employee.DepartmentId);
                                        }
                                        @if (departmentHasSection)
                                        {
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Division</MudInputLabel>
                                                <MudSelect Class="@slectClasss" DisableUnderLine @bind-Value="employee.DivisionId" Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @foreach (var div in DivisionsL)
                                                    {
                                                        <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Department</MudInputLabel>
                                                <MudSelect Class="@slectClasss" DisableUnderLine @bind-Value="employee.DepartmentId" Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @foreach (var dep in DepartmentsL.Where(d => d.DivisionId == employee.DivisionId))
                                                    {
                                                        <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                            @if (departmentHasSection)
                                            {
                                                var sections = employee.DepartmentId != 0 ? SectionService.SectionTs.Where(s => s.DepartmentId == employee.DepartmentId) : Enumerable.Empty<SectionT>();
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Section</MudInputLabel>
                                                    <MudSelect Class="@slectClasss" DisableUnderLine @bind-Value="employee.SectionId" Margin="Margin.Dense">
                                                         <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                     @if (sections.Any())
                                                        {
                                                            @foreach (var sect in sections)
                                                            {
                                                                <MudSelectItem Value="@sect.Id">@sect.Name</MudSelectItem>
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <MudSelectItem Value="0">&nbsp;</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Position</MudInputLabel>
                                                        <MudSelect Class="@slectClasss" DisableUnderLine @bind-Value="employee.PositionId" Margin="Margin.Dense">
                                                         <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                     @foreach (var dep in PositionsL.Where(d => d.DivisionId == employee.DivisionId && d.DepartmentId == employee.DepartmentId && d.SectionId == employee.SectionId))
                                                        {
                                                            <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            }
                                        }
                                        else {
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Division</MudInputLabel>
                                                <MudSelect @bind-Value="employee.DivisionId" Class="@slectClasss" DisableUnderLine Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @foreach (var div in DivisionsL)
                                                    {
                                                        <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Department</MudInputLabel>
                                                <MudSelect @bind-Value="employee.DepartmentId" Class="@slectClasss" DisableUnderLine Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @foreach (var dep in DepartmentsL.Where(d => d.DivisionId == employee.DivisionId))
                                                    {
                                                        <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Position</MudInputLabel>
                                                    <MudSelect @bind-Value="employee.PositionId" Class="@slectClasss" DisableUnderLine Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                 @foreach (var dep in PositionsL.Where(d => d.DepartmentId == employee.DepartmentId))
                                                    {
                                                        <MudSelectItem Value="@dep.Id">@dep.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                        }                                
                                        </div>
                                </div>
                                <MudItem xs="12" Class="d-flex justify-content-end mt-5">
                                    @* <MudButton OnClick="() => Activate(1)" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Size="Size.Medium" EndIcon="@Icons.Material.Rounded.NavigateNext" Class="btnadd">Next</MudButton> *@
                                        <button Class="btn btnnext" type="submit">NEXT</button>
                                </MudItem>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </EditForm>
            </MudGrid>
        </MudTabPanel>

        @* ====================================================================================  PERSONAL  ==================================================================================== *@
        <MudTabPanel TabContent="tabHeader(1)">
            <MudGrid>
                <EditForm Model="employee" OnValidSubmit="ActivateAddressField" class="d-flex flex-column flex-grow-1" style="margin-top: 13px;">

                    <MudItem xs="12" >
                            <DataAnnotationsValidator />

                            <span class="spantitle">Personal Details</span>
                            <MudCard Class="mdcard1" Elevation="0">
                                <MudCardContent>
                                    <div class="d-flex flex-column flex-grow-1 mb-3">
                                        <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                            <div class="flex-grow-1">
                                                <MudInputLabel>First Name</MudInputLabel>
                                                <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.FirstName" />
                                            <ValidationMessage For="@(() => employee.FirstName)" class="mb-2 valmessage" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Middle Name</MudInputLabel>
                                                 <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.MiddleName" />
                                                <ValidationMessage For="@(() => employee.MiddleName)" class="mb-2 valmessage" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Last Name</MudInputLabel>
                                                 <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.LastName" />
                                                <ValidationMessage For="@(() => employee.LastName)" class="mb-2 valmessage" />
                                             </div>
                                             <div class="flex-grow-1 flex-lg-grow-0 ">
                                                 <MudInputLabel>Extension</MudInputLabel>
                                                 <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.Extension" />
                                                 <ValidationMessage For="@(() => employee.Extension)" class="mb-2 valmessage" />

                                             </div>
                                         </div>
                                         <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2 align-items-center">
                                             <div class="flex-grow-1" style="width: 468px;">
                                                 <MudInputLabel>Birthdate (mm/dd/yyyy)</MudInputLabel>
                                                 <MudDatePicker Class="txf" DisableUnderLine @bind-Date="bday" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Margin="Margin.Dense" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Age</MudInputLabel>
                                                 <MudTextField Class="txf" DisableUnderLine Value="@CalculateAge(bday)" ReadOnly="true" Margin="Margin.Dense" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Gender</MudInputLabel>
                                                 <MudSelect Class="@slectClasss" DisableUnderLine @bind-Value="employee.GenderId" Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                    @foreach (var gender in GendersL)
                                                    {
                                                        <MudSelectItem Value="@gender.Id">@gender.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                        </div>
                                        <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Civil Status</MudInputLabel>
                                                <MudSelect Class="@slectClasss" @bind-Value="employee.CivilStatusId" DisableUnderLine Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                    @foreach (var cs in CivilStatusL)
                                                    {
                                                        <MudSelectItem Value="@cs.Id">@cs.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Nationality</MudInputLabel>
                                                <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.Nationality" />
                                                <ValidationMessage For="@(() => employee.Nationality)" class="mb-2 valmessage" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Religion</MudInputLabel>
                                                 <MudSelect @bind-Value="employee.ReligionId" Class="@slectClasss" DisableUnderLine Margin="Margin.Dense">
                                                     <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                    @foreach (var rel in ReligionsL)
                                                    {
                                                        <MudSelectItem Value="@rel.Id">@rel.Name</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </div>
                                        </div>
                                        <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Mobile #</MudInputLabel>
                                                <MudTextField @bind-Value="employee.MobileNumber" Class="txf" DisableUnderLine Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentText="+63" MaxLength="10" For="@(() => employee.MobileNumber)" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Weight(kg)</MudInputLabel>
                                                 <InputNumber Class="txf1 w-100 mt-1" @bind-Value="employee.Weight" />
                                             </div>
                                             <div class="flex-grow-1">
                                                 <MudInputLabel>Height(cm)</MudInputLabel>
                                                 <InputNumber Class="txf1 w-100 mt-1" @bind-Value="employee.Height" />
                                             </div>
                                         </div>
                                     </div>
                                 </MudCardContent>
                             </MudCard>
                    </MudItem>
                     <MudItem xs="12">
                         <div class="d-flex flex-grow-1 justify-content-center">
                             <MudDivider DividerType="DividerType.Middle" Class="my-2 w-25 justify-content-center" Style="border: 2px solid #78909C; border-radius: 5px;" />
                         </div>
                     </MudItem>
                    <MudItem xs="12">
                        <span class="spantitle">Person to Notify in Case of Emergency</span>
                         <MudCard Class="mdcard1" Elevation="0">
                            <MudCardContent>
                                <div class="d-flex flex-column flex-grow-1 mb-3">
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                        <div class="flex-grow-1">
                                             <MudInputLabel>Name</MudInputLabel>
                                             <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.EmerName" />
                                             <ValidationMessage For="@(() => employee.EmerName)" class="mb-2 valmessage" />
                                        </div>
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Relationship</MudInputLabel>
                                             <MudSelect @bind-Value="employee.EmerRelationshipId" Class="@slectClasss" DisableUnderLine Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var rel in EmerRelationshipsL)
                                                {
                                                    <MudSelectItem Value="@rel.Id">@rel.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </div>
                                         <div class="flex-grow-1">
                                            <MudInputLabel>Address</MudInputLabel>
                                            <InputText Class="txf1 w-100 mt-1" @bind-Value="employee.EmerAddress" />
                                             <ValidationMessage For="@(() => employee.EmerAddress)" class="mb-2 valmessage" />
                                        </div>
                                         <div class="flex-grow-1">
                                            <MudInputLabel>Mobile #</MudInputLabel>
                                            <MudTextField @bind-Value="employee.EmerMobNum" Class="txf" DisableUnderLine Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentText="+63" MaxLength="10" For="@(() => employee.EmerMobNum)" />
                                         </div>
                                    </div>
                                </div>

                                <MudItem xs="12" Class="d-flex justify-content-center mt-5">
                                    <button Class="btn btnnext" type="submit">NEXT</button>
                                </MudItem>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </EditForm>

                 <MudItem xs="12">
                     <div class="d-flex flex-grow-1 justify-content-center">
                         <MudDivider DividerType="DividerType.Middle" Class="my-2 w-25 justify-content-center" Style="border: 2px solid #78909C; border-radius: 5px;" />
                     </div>
                </MudItem>
                <MudItem xs="12">
                    <span class="spantitle">Address</span>
                     <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>
                            <span class="spantitle">Present Address</span>
                            <div class="d-flex flex-column flex-grow-1 mb-3">
                                <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                    <div class="flex-grow-1">
                                         <MudInputLabel>(Unit/House/Building/Street Number, Street Name, Barangay Name)</MudInputLabel>
                                         <MudTextField @bind-Value="address.CurrentAdd" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                    </div>
                                </div>
                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                     <div class="flex-grow-1">
                                          <MudInputLabel>City</MudInputLabel>
                                          <MudTextField id="bb" @bind-Value="address.CurrentCity" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                      <div class="flex-grow-1">
                                          <MudInputLabel>Province</MudInputLabel>
                                           <MudTextField @bind-Value="address.CurrentProvince" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                      <div class="flex-grow-1">
                                         <MudInputLabel>ZipCode</MudInputLabel>
                                           <MudTextField @bind-Value="address.CurrentZipCode" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Country</MudInputLabel>
                                         <MudTextField @bind-Value="address.CurrentCountry" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                                 <span class="spantitle">Permanent Address</span>
                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                     <div class="flex-grow-1">
                                         <MudInputLabel>(Unit/House/Building/Street Number, Street Name, Barangay Name)</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentAdd" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-2">
                                     <div class="flex-grow-1">
                                         <MudInputLabel>City</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentCity" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Province</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentProvince" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                        <MudInputLabel>ZipCode</MudInputLabel>
                                           <MudTextField @bind-Value="address.PermanentZipCode" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                     <div class="flex-grow-1">
                                         <MudInputLabel>Country</MudInputLabel>
                                         <MudTextField @bind-Value="address.PermanentCountry" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                     </div>
                                 </div>
                            </div>
                             <MudItem xs="12" Class="d-flex justify-content-between mt-5">
                                     <MudButton OnClick="() => Activate(0)" Variant="Variant.Filled" Size="Size.Medium" EndIcon="@Icons.Material.Rounded.NavigateNext" Class="btnadd">Back</MudButton>
                                     <MudButton OnClick="() => Activate(2)" Variant="Variant.Filled" Size="Size.Medium" EndIcon="@Icons.Material.Rounded.NavigateNext" Class="btnadd">Next</MudButton>
                                 </MudItem>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        @* ====================================================================================  EDUCATION  ==================================================================================== *@

        <MudTabPanel TabContent="tabHeader(2)" >
            <MudGrid>
                 <MudItem xs="12" Style="padding-top: 0px;">
                     <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                    <span class="spantitle">Primary</span>
                                    <div>
                                        <MudTooltip  Text="Click to remove Primary">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="RemovePrimary" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                        </MudTooltip>
                                        <MudTooltip Text="Click to add more Primary">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewPrimary(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                        </MudTooltip>
                                    </div>                                
                                </div>
                                @if (listOfPrimary.Any())
                                {
                                    @foreach (var pri in listOfPrimary)
                                    {
                                        <div class="mb-3 divSchool">
                                            <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Name of School</MudInputLabel>
                                                    <MudTextField @bind-Value="pri.PriSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>School Location</MudInputLabel>
                                                    <MudTextField @bind-Value="pri.PriSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                            </div>
                                             <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Award</MudInputLabel>
                                                    <MudTextField @bind-Value="pri.PriAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                </div>
                                                 <div class="flex-grow-1">
                                                      <MudInputLabel>School Year</MudInputLabel>
                                                    <MudTextField @bind-Value="pri.PriSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                            </div>
                                        </div>
                                        
                                    }
                                }
                                else
                                {
                                    @foreach (var pri in listOfPrimary)
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Primary information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>       
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                    <span class="spantitle">Secondary</span>
                                    <div>
                                        <MudTooltip Text="Click to remove Secondary">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="RemoveSecondary" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                        </MudTooltip>
                                        <MudTooltip Text="Click to add more Secondary">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewSecondary(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                        </MudTooltip>
                                    </div>
                                </div>
                               
                                @if (listOfSecondary.Any())
                                {
                                    @foreach (var sec in listOfSecondary)
                                    {
                                        <div class="mb-3 divSchool">
                                            <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Name of School</MudInputLabel>
                                                    <MudTextField @bind-Value="sec.SecSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>School Location</MudInputLabel>
                                                     <MudTextField @bind-Value="sec.SecSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                             </div>
                                             <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>Award</MudInputLabel>
                                                     <MudTextField @bind-Value="sec.SecAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>School Year</MudInputLabel>
                                                     <MudTextField @bind-Value="sec.SecSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                             </div>
                                         </div>
                                    }
                                }
                                else
                                {
                                    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                         <MudCard>
                                             <MudCardContent>
                                                  <p>No Secondary information available.</p>
                                             </MudCardContent>
                                         </MudCard>
                                    </MudContainer>
                                   
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" Style="padding-bottom: 0px;">
                    <div class="d-flex flex-grow-1 align-items-center">
                        <MudCheckBox @bind-Checked="IsListaddshs" Color="Color.Primary"></MudCheckBox><span class="spantitle">Senior High School</span>
                    </div>
                </MudItem>
                @if (IsListaddshs)
                {
                    <MudItem xs="12" Style="padding-top: 0px;">
                        <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex flex-column flex-grow-1">
                                    <div class="d-flex flex-grow-1 justify-content-end align-items-center mb-2">
                                        <div>
                                            <MudTooltip Text="Click to remove SHS">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="RemoveShs" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                            </MudTooltip>
                                            <MudTooltip Text="Click to add more SHS">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewShs(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                            </MudTooltip>
                                        </div>
                                    </div>

                                    @if (listOfShs.Any())
                                    {
                                        @foreach (var shs in listOfShs)
                                        {
                                            <div class="mb-3 divSchool">
                                                <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                    <div class="flex-grow-1">
                                                        <MudInputLabel>Name of School</MudInputLabel>
                                                        <MudTextField @bind-Value="shs.ShsSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Location</MudInputLabel>
                                                         <MudTextField @bind-Value="shs.ShsSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Award</MudInputLabel>
                                                         <MudTextField @bind-Value="shs.ShsAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Year</MudInputLabel>
                                                         <MudTextField @bind-Value="shs.ShsSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                             </div>
                                        }
                                    }
                                    else
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No SHS information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                <MudItem xs="12" Style="padding-bottom: 0px;">
                    <div class="d-flex flex-grow-1 align-items-center">
                        <MudCheckBox @bind-Checked="IsListaddcoll" Color="Color.Primary"></MudCheckBox><span class="spantitle">College</span>
                    </div>
                </MudItem>
                @if (IsListaddcoll)
                {
                    <MudItem xs="12" Style="padding-top: 0px;">
                        <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex flex-column flex-grow-1">
                                    <div class="d-flex flex-grow-1 justify-content-end align-items-center mb-2">
                                        <div>
                                            <MudTooltip Text="Click to remove College">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="RemoveCollege" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                            </MudTooltip>
                                            <MudTooltip Text="Click to add more College">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewCollege(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                            </MudTooltip>
                                        </div>
                                    </div>

                                    @if (listOfCollege.Any())
                                    {
                                        @foreach (var col in listOfCollege)
                                        {
                                            <div class="mb-3 divSchool">
                                                <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                    <div class="flex-grow-1">
                                                        <MudInputLabel>Name of School</MudInputLabel>
                                                        <MudTextField @bind-Value="col.CollSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Location</MudInputLabel>
                                                         <MudTextField @bind-Value="col.CollSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Award</MudInputLabel>
                                                         <MudTextField @bind-Value="col.CollAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Course</MudInputLabel>
                                                         <MudTextField @bind-Value="col.CollCourse" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Year</MudInputLabel>
                                                         <MudTextField @bind-Value="col.CollSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                             </div>
                                        }
                                    }
                                    else
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No College information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                <MudItem xs="12" Style="padding-bottom: 0px;">
                    <div class="d-flex flex-grow-1 align-items-center">
                        <MudCheckBox @bind-Checked="IsListaddmas" Color="Color.Primary"></MudCheckBox><span class="spantitle">Masteral</span>
                    </div>
                </MudItem>
                @if (IsListaddmas)
                {
                    <MudItem xs="12" Style="padding-top: 0px;">
                        <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex flex-column flex-grow-1">
                                    <div class="d-flex flex-grow-1 justify-content-end align-items-center mb-2">
                                        <div>
                                            <MudTooltip Text="Click to remove Masteral">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="RemoveMasteral" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                            </MudTooltip>
                                            <MudTooltip Text="Click to add more Masteral">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewMasteral(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                            </MudTooltip>
                                        </div>
                                    </div>

                                    @if (listOfMasteral.Any())
                                    {
                                        @foreach (var mas in listOfMasteral)
                                        {
                                            <div class="mb-3 divSchool">
                                                <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                    <div class="flex-grow-1">
                                                        <MudInputLabel>Name of School</MudInputLabel>
                                                        <MudTextField @bind-Value="mas.MasSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Location</MudInputLabel>
                                                         <MudTextField @bind-Value="mas.MasSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Award</MudInputLabel>
                                                         <MudTextField @bind-Value="mas.MasAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                      <div class="flex-grow-1">
                                                         <MudInputLabel>Course</MudInputLabel>
                                                         <MudTextField @bind-Value="mas.MasCourse" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Year</MudInputLabel>
                                                         <MudTextField @bind-Value="mas.MasSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                             </div>
                                        }
                                    }
                                    else
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Masteral information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                <MudItem xs="12" Style="padding-bottom: 0px;">
                    <div class="d-flex flex-grow-1 align-items-center">
                        <MudCheckBox @bind-Checked="IsListadddoc" Color="Color.Primary"></MudCheckBox><span class="spantitle">Doctorate</span>
                    </div>
                </MudItem>
                @if (IsListadddoc)
                {
                    <MudItem xs="12" Style="padding-top: 0px;">
                        <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex flex-column flex-grow-1">
                                    <div class="d-flex flex-grow-1 justify-content-end align-items-center mb-2">
                                        <div>
                                            <MudTooltip Text="Click to remove Doctorate">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="RemoveDoctorate" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                            </MudTooltip>
                                            <MudTooltip Text="Click to add more Doctorate">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewDoctorate(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                            </MudTooltip>
                                        </div>
                                    </div>

                                    @if (listOfDoctorate.Any())
                                    {
                                        @foreach (var doc in listOfDoctorate)
                                        {
                                            <div class="mb-3 divSchool">
                                                <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                    <div class="flex-grow-1">
                                                        <MudInputLabel>Name of School</MudInputLabel>
                                                        <MudTextField @bind-Value="doc.DocSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Location</MudInputLabel>
                                                         <MudTextField @bind-Value="doc.DocSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Award</MudInputLabel>
                                                         <MudTextField @bind-Value="doc.DocAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Course</MudInputLabel>
                                                         <MudTextField @bind-Value="doc.DocCourse" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Year</MudInputLabel>
                                                         <MudTextField @bind-Value="doc.DocSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                             </div>
                                        }
                                    }
                                    else
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Doctorate information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                </div>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                <MudItem xs="12" Style="padding-bottom: 0px;">
                    <div class="d-flex flex-grow-1 align-items-center">
                        <MudCheckBox @bind-Checked="IsListaddothers" Color="Color.Primary"></MudCheckBox><span class="spantitle">Other</span>
                    </div>
                </MudItem>
                @if (IsListaddothers)
                {
                    <MudItem xs="12" Style="padding-top: 0px;">
                        <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                            <MudCardContent Style="padding-top: 0px;">
                                <div class="d-flex flex-column flex-grow-1">
                                    <div class="d-flex flex-grow-1 justify-content-end align-items-center mb-2">
                                        <div>
                                            <MudTooltip Text="Click to remove Other">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="RemoveOthers" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                            </MudTooltip>
                                            <MudTooltip Text="Click to add more Other">
                                                <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewOthers(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                            </MudTooltip>
                                        </div>
                                    </div>

                                    @if (listOfOthers.Any())
                                    {
                                        @foreach (var other in listOfOthers)
                                        {
                                            <div class="mb-3 divSchool">
                                                <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                    <div class="flex-grow-1">
                                                        <MudInputLabel>School Type</MudInputLabel>
                                                        <MudTextField @bind-Value="other.OthersSchoolType" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                    <div class="flex-grow-1">
                                                        <MudInputLabel>Name of School</MudInputLabel>
                                                        <MudTextField @bind-Value="other.OthersSchoolName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Location</MudInputLabel>
                                                         <MudTextField @bind-Value="other.OthersSchoolLoc" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                                 <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Award</MudInputLabel>
                                                         <MudTextField @bind-Value="other.OthersAward" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>Course</MudInputLabel>
                                                         <MudTextField @bind-Value="other.OthersCourse" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                     <div class="flex-grow-1">
                                                         <MudInputLabel>School Year</MudInputLabel>
                                                         <MudTextField @bind-Value="other.OthersSchoolYear" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                     </div>
                                                 </div>
                                             </div>
                                        }
                                    }
                                    else
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Other information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                </div>
                                <MudItem xs="12" Class="d-flex justify-content-between mt-5">
                                 <MudButton OnClick="() => Activate(1)" Variant="Variant.Filled" Size="Size.Medium" EndIcon="@Icons.Material.Rounded.NavigateNext" Class="btnadd">Back</MudButton>
                                 <MudButton OnClick="() => Activate(3)" Variant="Variant.Filled" Size="Size.Medium" EndIcon="@Icons.Material.Rounded.NavigateNext" Class="btnadd">Next</MudButton>
                             </MudItem>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudTabPanel>

        @* ====================================================================================  LICENCE  ==================================================================================== *@

        <MudTabPanel TabContent="tabHeader(3)">
            <MudGrid>
                <MudItem xs="12" Style="padding-top: 0px;">
                    <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                    <span class="spantitle">Licences</span>
                                    <div>
                                        <MudTooltip Text="Click to remove Licences">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="RemoveLicense" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                        </MudTooltip>
                                        <MudTooltip Text="Click to add more Licences">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewLicense(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                        </MudTooltip>
                                    </div>
                                </div>
                                @if (listofLicense.Any())
                                {
                                    @foreach (var lis in listofLicense)
                                    {
                                        <div class="mb-3 divSchool">
                                            <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Professional Licenses/Board Examinations Taken</MudInputLabel>
                                                    <MudTextField @bind-Value="lis.Examination" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>Professional Membership</MudInputLabel>
                                                     <MudTextField @bind-Value="lis.ProfMembership" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                             </div>
                                             <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 align-items-center">
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>License No.</MudInputLabel>
                                                     <MudTextField @bind-Value="lis.LicenseNo" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>Date(mm/dd/yy)</MudInputLabel>
                                                     <MudDatePicker Class="txf" DisableUnderLine @bind-Date="lis.Date" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Margin="Margin.Dense" />
                                                 </div>
                                             </div>
                                         </div>
                                    }
                                }
                                else
                                {
                                    @foreach (var pri in listofLicense)
                                    {
                                        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                            <MudCard>
                                                <MudCardContent>
                                                    <p>No Licenses information available.</p>
                                                </MudCardContent>
                                            </MudCard>
                                        </MudContainer>
                                    }
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12">
                    <MudCard Class="mdcard1" Elevation="0">
                        <MudCardContent>       
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                    <span class="spantitle">Trainings</span>
                                    <div>
                                        <MudTooltip Text="Click to remove Trainings">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="RemoveTrainings" Icon="@Icons.Material.Rounded.RemoveCircle" />
                                        </MudTooltip>
                                        <MudTooltip Text="Click to add more Trainings">
                                            <MudIconButton Class="p-0 addminbtn" OnClick="() => AddNewTrainings(employee.Verify_Id)" Icon="@Icons.Material.Rounded.AddCircle" />
                                        </MudTooltip>
                                    </div>
                                </div>
                               
                                @if (listOfTrainings.Any())
                                {
                                    @foreach (var train in listOfTrainings)
                                    {
                                        <div class="mb-3 divSchool">
                                            <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1 align-items-center">
                                                <div class="flex-grow-1">
                                                    <MudInputLabel>Training Name</MudInputLabel>
                                                    <MudTextField @bind-Value="train.TrainingName" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>Training Date(mm/dd/yyyy)</MudInputLabel>
                                                     <MudDatePicker Class="txf" DisableUnderLine @bind-Date="train.TrainingDate" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Editable="true" Margin="Margin.Dense" />
                                                 </div>
                                                 <div class="flex-grow-1">
                                                     <MudInputLabel>Remarks</MudInputLabel>
                                                     <MudTextField @bind-Value="train.Remarks" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                                 </div>
                                             </div>
                                         </div>
                                    }
                                }
                                else
                                {
                                    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                                         <MudCard>
                                             <MudCardContent>
                                                  <p>No Trainings information available.</p>
                                             </MudCardContent>
                                         </MudCard>
                                    </MudContainer>
                                   
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>

        @* ====================================================================================  PAYROLL  ==================================================================================== *@

        <MudTabPanel TabContent="tabHeader(4)">
            <MudGrid>
                <MudItem xs="12" Style="padding-top: 0px;">
                    <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                    <span class="spantitle">Documents</span>
                                </div>
                                <div class="mb-3 divSchool">
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Rate</MudInputLabel>
                                            <MudTextField @bind-Value="payroll.Rate" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Rate Type</MudInputLabel>
                                             <MudSelect Class="frmselect" DisableUnderLine @bind-Value="payroll.RateTypeId" Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var rate in RateTypeL)
                                                {
                                                    <MudSelectItem Value="@rate.Id">@rate.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                         </div>
                                          <div class="flex-grow-1">
                                             <MudInputLabel>Cash-Bond</MudInputLabel>
                                            <MudSelect Class="frmselect" DisableUnderLine @bind-Value="payroll.CashbondId" Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var cb in CashbondL)
                                                {
                                                    <MudSelectItem Value="@cb.Id">@cb.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                         </div>
                                     </div>
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Meal Allowance</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.MealAllowance" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                          <div class="flex-grow-1">
                                             <MudInputLabel>Biometric Id No.</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.BiometricID" Class="txf" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Bank Account</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.BankAcc" Class="txf" MaxLength="10" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                     </div>
                                 </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" Style="padding-top: 0px;">
                    <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                     <span class="spantitle">Statutory Documents</span>
                                </div>
                                <div class="mb-3 divSchool">
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                         <div class="flex-grow-1">
                                             <MudInputLabel>PHIC No.</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.PhilHealthNum" Class="txf" MaxLength="12" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                          <div class="flex-grow-1">
                                             <MudInputLabel>HDMF No.</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.HDMFNum" Class="txf" MaxLength="12" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                     </div>
                                     <div class="d-flex flex-wrap gap-lg-4 gap-sm-2">
                                         <div class="flex-grow-1">
                                             <MudInputLabel>SSS No.</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.SSSNum" Class="txf" MaxLength="12" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                          <div class="flex-grow-1">
                                             <MudInputLabel>TIN No.</MudInputLabel>
                                             <MudTextField @bind-Value="payroll.TINNum" Class="txf" MaxLength="12" DisableUnderLine Margin="Margin.Dense" />
                                         </div>
                                     </div>
                                 </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                 <MudItem xs="12" Style="padding-top: 0px;">
                     <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                         <MudCardContent>
                             <div class="d-flex flex-column flex-grow-1">
                                 <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                     <span class="spantitle">Schedule</span>
                                 </div>
                                 <div class="mb-3 divSchool">
                                     <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                         <div class="flex-grow-1">
                                             <MudInputLabel>Schedule Type</MudInputLabel>
                                             <MudSelect Class="frmselect" DisableUnderLine @bind-Value="payroll.ScheduleTypeId" Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var sched in ScheduleTypeL)
                                                {
                                                    <MudSelectItem Value="@sched.Id">@sched.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                         </div>
                                         @if (payroll.ScheduleTypeId != 0) {
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Time In</MudInputLabel>

                                                @foreach (var item in ScheduleTypeL.Where(s => s.Id == payroll.ScheduleTypeId))
                                                {
                                                    if (item.Id == payroll.ScheduleTypeId)
                                                    {
                                                        <MudTextField @bind-Value="item.TimeIn" Class="txf" DisableUnderLine Margin="Margin.Dense" ReadOnly="true"/>
                                                    }
                                                }
                                            </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Time In</MudInputLabel>

                                                @foreach (var item in ScheduleTypeL.Where(s => s.Id == payroll.ScheduleTypeId))
                                                {
                                                    if (item.Id == payroll.ScheduleTypeId)
                                                    {
                                                        <MudTextField @bind-Value="item.TimeOut" Class="txf" DisableUnderLine Margin="Margin.Dense" ReadOnly="true" />
                                                    }
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                             <div class="flex-grow-1">
                                                <MudInputLabel>Time In</MudInputLabel>
                                                <MudTextField T="string" Class="txf" DisableUnderLine Margin="Margin.Dense" ReadOnly="true" />
                                             </div>
                                            <div class="flex-grow-1">
                                                <MudInputLabel>Time In</MudInputLabel>
                                                <MudTextField T="string" Class="txf" DisableUnderLine Margin="Margin.Dense" ReadOnly="true" />
                                             </div>
                                        }

                                     </div>
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1 align-items-center">
                                        <div class="flex-grow-1">
                                            <MudInputLabel>Rest Day</MudInputLabel>
                                            <MudSelect Class="frmselect" DisableUnderLine @bind-Value="payroll.RestDayId" Margin="Margin.Dense">
                                                 <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                                                @foreach (var restday in RestDayL)
                                                {
                                                    <MudSelectItem Value="@restday.Id">@restday.Name</MudSelectItem>
                                                }
                                            </MudSelect>
                                         </div>
                                         <MudSpacer/>
                                     </div>
                                 </div>
                             </div>
                         </MudCardContent>
                     </MudCard>
                 </MudItem>
                <MudItem xs="12" Style="padding-top: 0px;">
                    <MudCard Class="mdcard1" Elevation="0" Style="padding-top: 0px;">
                        <MudCardContent>
                            <div class="d-flex flex-column flex-grow-1">
                                <div class="d-flex flex-grow-1 justify-content-between align-items-center mb-2">
                                    <span class="spantitle">Files</span>
                                </div>
                                <div class="mb-3 divSchool">
                                    <div class="d-flex flex-wrap gap-lg-4 gap-sm-2 mb-1">
                                        <div class="flex-grow-1">
                                            @for (int i = 0; i < listOfDocuments.Count; i++)
                                            {
                                                var index = i;
                                                var docs = listOfDocuments[i];
                                                @if (docs.PdfFile != null)
                                                {
                                                <MudText Typo="@Typo.h6">@docs.PdfFile.Count() File@(docs.PdfFile.Count() == 1 ? "" : "s"):</MudText>
                                                <MudList>
                                                    @foreach (var file in docs.PdfFile)
                                                    {
                                                        <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">

                                                            @file.Name <code>@file.Size bytes</code>
                                                        </MudListItem>
                                                    }
                                                </MudList>
                                                    <MudCardActions Style="display:flex; justify-content: center; padding-bottom:10px; margin-bottom:-15px;">
                                                        <MudFileUpload T="IBrowserFile" OnFilesChanged="e => UpPdfSec12(e, index)" Accept=".pdf">
                                                            <ButtonTemplate>
                                                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" for="@context" Style="text-transform: none;">Upload Files</MudButton>
                                                            </ButtonTemplate>
                                                        </MudFileUpload>
                                                    </MudCardActions>
                                            }
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    //TAB PANEL
    MudTabs tabs;
    private string slectClasss = "frmselect";

    void backbtn()
    {
        NavigationManager.NavigateTo("/employee");
    }

    void Activate(int index)
    {
        // tabs.ActivatePanel(index);

        if (index == 1) {
            if (employee.AreaId == 0 || employee.StatusId == 0 || employee.EmploymentStatusId == 0 || employee.DivisionId == 0 || employee.DepartmentId == 0 || employee.PositionId == 0)
            {
                _toastService.ShowError("Fill out all fields.");
                slectClasss = "frmselecterror";
            }
            else
            {
                tabs.ActivatePanel(index);
                slectClasss = "frmselect";
            }
        }
        else if (index == 2)
        {
            tabs.ActivatePanel(index);
            slectClasss = "frmselect";
        }
    }

    private async void ActivateAddressField()
    {
        if (employee.GenderId == 0 || employee.CivilStatusId == 0 || employee.ReligionId == 0 || employee.EmerRelationshipId == 0)
        {
            _toastService.ShowError("Fill out all fields.");
            slectClasss = "frmselecterror";

        }
        else
        {
            slectClasss = "frmselect";  
            await JSRuntime.InvokeVoidAsync("scrollToDiv");
        }
    }

    int activeIndex;
    string GetTabClass(int tabId)
    {
        if (activeIndex > tabId)
        {
            return "mud-tabs-afterindex";
        }
        else
        {
            return "mud-tabs-defaultindex";
        }
    }
    string GetTabChipClass(int tabId)
    {
        if (activeIndex > tabId)
        {
            return "mud-chip-after";
        }
        else if (activeIndex == tabId) {
            return "mud-chip-active";
        }
        else {
            return "mud-chip-default";
        }
    }

    string GetTabTextClass(int tabId)
    {
        if (activeIndex > tabId)
        {
            return "mud-text-after";
        }
        else if (activeIndex == tabId)
        {
            return "mud-text-active";
        }
        else {
            return "mud-text-default";
        }
    }

    RenderFragment tabHeader(int tabId)
    {
        return builder =>
        {
            if (tabId == 0) {
                builder.OpenComponent<MudChip>(0);
                builder.AddAttribute(1, "Class", @GetTabChipClass(0));
                builder.AddAttribute(3, "Text", $"{tabId + 1}");
                builder.CloseComponent();
                builder.OpenElement(4, "span");
                builder.AddAttribute(5, "class", @GetTabTextClass(0)); 
                builder.AddContent(6, "Job");
                builder.CloseComponent();
            }
            else if (tabId == 1) {
                builder.OpenComponent<MudChip>(0);
                builder.AddAttribute(1, "Class", @GetTabChipClass(1)); 
                builder.AddAttribute(3, "Text", $"{tabId + 1}");
                builder.CloseComponent();
                builder.OpenElement(4, "span");
                builder.AddAttribute(5, "class", @GetTabTextClass(1)); 
                builder.AddContent(6, "Personal");
                builder.CloseComponent();
            }
            else if (tabId == 2) {
                builder.OpenComponent<MudChip>(0);
                builder.AddAttribute(1, "Class", @GetTabChipClass(2)); 
                builder.AddAttribute(3, "Text", $"{tabId + 1}");
                builder.CloseComponent();
                builder.OpenElement(4, "span");
                builder.AddAttribute(5, "class", @GetTabTextClass(2));
                builder.AddContent(6, "Education");
                builder.CloseComponent();
            }
            else if (tabId == 3) {
                builder.OpenComponent<MudChip>(0);
                builder.AddAttribute(1, "Class", @GetTabChipClass(3)); 
                builder.AddAttribute(3, "Text", $"{tabId + 1}");
                builder.CloseComponent();
                builder.OpenElement(4, "span");
                builder.AddAttribute(5, "class", @GetTabTextClass(3)); 
                builder.AddContent(6, "Licences & Training");
                builder.CloseComponent();
            }
            else if (tabId == 4)
            {
                builder.OpenComponent<MudChip>(0);
                builder.AddAttribute(1, "Class", @GetTabChipClass(4)); 
                builder.AddAttribute(3, "Text", $"{tabId + 1}");
                builder.CloseComponent();
                builder.OpenElement(4, "span");
                builder.AddAttribute(5, "class", @GetTabTextClass(4)); 
                builder.AddContent(6, "Payroll");
                builder.CloseComponent();
            }

        };
    }


    #nullable disable
    [Parameter]
    public int? id { get; set; }   

    EmployeeT employee = new();
    AddressT address = new();
    PayrollT payroll = new();
    LicenseT license = new();
    DocumentT document = new();


    bool success;

    //FK
    private List<AreaT> AreasL = new List<AreaT>();
    private List<StatusT> StatusL = new List<StatusT>();
    private List<EmploymentStatusT> EmploymentStatusL = new List<EmploymentStatusT>();

    private List<DivisionT> DivisionsL = new List<DivisionT>();
    private List<DepartmentT> DepartmentsL = new List<DepartmentT>();
    private List<SectionT> SectionsL = new List<SectionT>();
    private List<PositionT> PositionsL = new List<PositionT>();

    private List<GenderT> GendersL = new List<GenderT>();
    private List<CivilStatusT> CivilStatusL = new List<CivilStatusT>();
    private List<ReligionT> ReligionsL = new List<ReligionT>();
    private List<EmerRelationshipT> EmerRelationshipsL = new List<EmerRelationshipT>();

    //PAYROLL
    private List<CashBondT> CashbondL = new List<CashBondT>();
    private List<ScheduleTypeT> ScheduleTypeL = new List<ScheduleTypeT>();
    private List<RateTypeT> RateTypeL = new List<RateTypeT>();
    private List<RestDayT> RestDayL = new List<RestDayT>();


    //EDUCATION
    List<CollegeT> listOfCollege = new();
    List<OtherEducT> listOfOthers = new();
    List<SecondaryT> listOfSecondary = new();
    List<DoctorateT> listOfDoctorate = new();
    List<PrimaryT> listOfPrimary = new();
    List<MasteralT> listOfMasteral = new();
    List<SeniorHST> listOfShs = new();
    List<TrainingT> listOfTrainings = new();
    List<LicenseT> listofLicense = new();
    List<DocumentT> listOfDocuments = new();

    private bool IsListaddshs;
    private bool IsListaddcoll;
    private bool IsListaddmas;
    private bool IsListaddothers;
    private bool IsListadddoc;

    string VerifyCode;

    private DateTime? bday { get; set; }
    private DateTime? Date = DateTime.Today;
    private DateTime? ResignationDate = DateTime.Today;
    private DateTime? ProbStart = DateTime.Today;
    private DateTime? ProbEnd = DateTime.Today;
    private DateTime? CasualStart = DateTime.Today;
    private DateTime? CasualEnd = DateTime.Today;
    private DateTime? FixedStart = DateTime.Today;
    private DateTime? FixedEnd = DateTime.Today;
    private DateTime? ProjStart = DateTime.Today;
    private DateTime? ProjEnd = DateTime.Today;
    private DateTime? DateHired = DateTime.Today;
    private DateTime? RegularDate = DateTime.Today;

    //attachment
    private string PDFBase64 { get; set; }
    private string PDFUrl { get; set; }
    private string PDFFileName { get; set; }
    private string PDFContentType { get; set; }
    private byte[] pdfData { get; set; }
    private bool pdfbool12 { get; set; }
    private bool PDFbool12 { get; set; }
    IList<IBrowserFile> pdffile = new List<IBrowserFile>();
    private List<MultipartFormDataContent> DocuEmployees = new List<MultipartFormDataContent>();

    public class DocumentT
    {
        public IList<IBrowserFile> PdfFile { get; set; } = new List<IBrowserFile>();
    }

    //image
    private string imgBase64 { get; set; }
    private string ImageUrl { get; set; }
    private string ImgFileName { get; set; }
    private string ImgContentType { get; set; }
    private string verifyId { get; set; }

    MultipartFormDataContent EmpImage = new MultipartFormDataContent();
    IList<IBrowserFile> Imagesfile = new List<IBrowserFile>();


    private string userRole;
    protected override async Task OnInitializedAsync()
    {
        await AreaService.GetAreaList();
        AreasL = AreaService.AreaTs;

        await EmployeeService.GetStatusList();
        StatusL = EmployeeService.StatusTs;

        await EmployeeService.GetEmploymentStatusList();
        EmploymentStatusL = EmployeeService.EmploymentStatusTs;

        await DivisionService.GetDivision();
        DivisionsL = DivisionService.DivisionTs;

        await DepartmentService.GetDepartment();
        DepartmentsL = DepartmentService.DepartmentTs;

        await SectionService.GetSection();
        SectionsL = SectionService.SectionTs;

        await PositionService.GetPosition();
        PositionsL = PositionService.PositionTs;

        await EmployeeService.GetGenderList();
        GendersL = EmployeeService.GenderTs;

        await EmployeeService.GetCivilStatusList();
        CivilStatusL = EmployeeService.CivilStatusTs;

        await EmployeeService.GetReligionList();
        ReligionsL = EmployeeService.ReligionTs;

        await EmployeeService.GetEmerRelationshipList();
        EmerRelationshipsL = EmployeeService.EmerRelationshipTs;

        await PayrollService.GetRateType();
        RateTypeL = PayrollService.RateTypeTs;

        await PayrollService.GetScheduleType();
        ScheduleTypeL = PayrollService.ScheduleTypeTs;

        await PayrollService.GetCashbond();
        CashbondL = PayrollService.CashBondTs;

        await PayrollService.GetRestDay();
        RestDayL = PayrollService.RestDayTs;



        imgBase64 = "./images/addIconImage.png";

        AddNewPrimary(employee.Verify_Id);
        AddNewSecondary(employee.Verify_Id);
        AddNewShs(employee.Verify_Id);
        AddNewCollege(employee.Verify_Id);
        AddNewMasteral(employee.Verify_Id);
        AddNewDoctorate(employee.Verify_Id);
        AddNewOthers(employee.Verify_Id);
        AddNewLicense(employee.Verify_Id);
        AddNewTrainings(employee.Verify_Id);
        AddNewDocument();

        var auth = await authState;
           
        userRole = auth.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
    }

    private void HandleDateHiredChanged(DateTime? newDate)
    {
        DateHired = newDate;
        Console.WriteLine(DateHired.ToString());
        if (DateHired.HasValue)
        {
            // Calculate the regularization date, which is 6 months after the DateHired.

            switch (employee.EmploymentStatusId)
            {
                case 1:
                    RegularDate = DateHired.Value.AddMonths(6);
                    break;

                case 2:
                    ProbStart = newDate;
                    ProbEnd = ProbStart.Value.AddMonths(3);
                    Console.WriteLine(ProbStart.ToString());
                    break;
            }
        }
        else
        {
            // If DateHired is not set, clear RegularDate.
            RegularDate = null;
        }
    }

    private string CalculateAge(DateTime? selectedDate)
    {
        if (selectedDate.HasValue)
        {
            DateTime currentDate = DateTime.Today;
            int age = currentDate.Year - selectedDate.Value.Year;

            if (selectedDate.Value > currentDate.AddYears(-age))
                age--;

            return age.ToString();
        }

        return string.Empty;
    }

    //IMAGE
    async Task uploadImage(InputFileChangeEventArgs e)
    {
        long lngImage = long.MaxValue;
        var brwModel = e.File;
        var imgFilename = e.File.Name;
        var imgContent = e.File.ContentType;
        var imgBuffer = new byte[e.File.Size];
        var imgURL = $"data:{imgContent};base64,{Convert.ToBase64String(imgBuffer)}";

        using (var _stream = brwModel.OpenReadStream(lngImage))
        {
            await _stream.ReadAsync(imgBuffer);
        }

        if (e.File.Name is null)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "No image uploaded!",
                    Icon = SweetAlertIcon.Error
                });
            return;
        }
        else
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(brwModel.OpenReadStream(lngImage));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(imgContent);

            ImageUrl = imgURL;
            ImgContentType = imgContent;
            ImgFileName = imgFilename;
            EmpImage.Add(content: fileContent, name: imgFilename, fileName: imgFilename);

            var base642 = Convert.ToBase64String(imgBuffer);
            imgBase64 = string.Format("data:image/*;base64,{0}", base642);
        }
    }

    //documents
    private async Task UpPdfSec12(InputFileChangeEventArgs e, int index)
    {
        long maxPDFSize = long.MaxValue;
        var _pdfModel = e.File;
        var _pdfFilename = e.File.Name;
        var _pdfContent = e.File.ContentType;
        var _pdfBuffer = new byte[e.File.Size];
        var _pdfURL = $"data:{_pdfContent};base64,{Convert.ToBase64String(_pdfBuffer)}";

        using (var _stream = _pdfModel.OpenReadStream(maxPDFSize))
        {
            await _stream.ReadAsync(_pdfBuffer);
        }
        if (e.File.Name is null)
        {
            imgBase64 = "Images/empty1.png";
        }
        else
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(_pdfModel.OpenReadStream(maxPDFSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(_pdfContent);

            PDFFileName = _pdfFilename;
            PDFUrl = _pdfURL;
            pdfData = _pdfBuffer;

            var streamContent = new StreamContent(_pdfModel.OpenReadStream(maxPDFSize));
            streamContent.Headers.ContentType = new MediaTypeHeaderValue(_pdfContent);

            content.Add(streamContent, "\"files\"", _pdfFilename);

            var pdfbase64 = Convert.ToBase64String(_pdfBuffer);
            PDFBase64 = string.Format("data:application/pdf;base64,{0}", pdfbase64);

            pdfbool12 = false;
            PDFbool12 = true;
            listOfDocuments[index].PdfFile.Add(e.File);
            DocuEmployees.Add(content);
        }
    }

    async Task CreateEmployee()
    {
        try
        {
            if (bday.HasValue)
            {
                DateTime currentDate = DateTime.Today;
                int age = currentDate.Year - bday.Value.Year;

                if (bday.Value > currentDate.AddYears(-age))
                    age--;

                employee.Age = age;
            }

            Console.WriteLine("Saving Page");
            var verifyCode = DateTime.Now.ToString("yyyyMMddhhmmssfff");

            employee.Verify_Id = verifyCode;

            employee.Birthdate = Convert.ToDateTime(bday);
            employee.DateHired = Convert.ToDateTime(DateHired);
            license.Date = Convert.ToDateTime(Date);


            if (!string.IsNullOrEmpty(employee.InactiveStatusId.ToString()))
            {
                employee.InactiveStatusId = 1;
            }

            var verifyId = await EmployeeService.CreateEmployee(employee);

            address.Verify_Id = verifyId;
            var adres = await AddressService.CreateAddress(address);


            payroll.Salary = "212";
            payroll.Paytype = "test";
            payroll.Verify_Id = verifyId;
            var savepayroll = await PayrollService.CreatePayroll(payroll);

            var divisionString = employee.DivisionId;
            var divisionPDF = employee.DivisionId;

            var departmentString = employee.DepartmentId;
            var departmentPDF = employee.DepartmentId;

            await OnsavingImg(employee.EmployeeNo, divisionString, departmentString, employee.LastName, verifyId);
            await OnPDFSaving(employee.EmployeeNo, divisionPDF, departmentPDF, employee.LastName, verifyId);

            await CreatePrimaryRecords(verifyCode);
            await CreateSecondaryRecords(verifyCode);
            await CreateSeniorHSRecords(verifyCode);
            await CreateCollegeRecords(verifyCode);
            await CreateMasteralRecords(verifyCode);
            await CreateDoctorateRecords(verifyCode);
            await CreateOtherEducRecords(verifyCode);
            await CreateLicenses(verifyCode);
            await CreateTrainings(verifyCode);

            NavigationManager.NavigateTo("employee");

            var swal = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = "Created Successfully!",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            _toastService.ShowError(ex.Message);
        }
    }

    private async Task OnsavingImg(string EmployeeId, int division, int department, string lastname, string verify)
    {
        using var _contentImg = new MultipartFormDataContent();
        _contentImg.Add(EmpImage.LastOrDefault());
        await ImageService.AttachFile(_contentImg, EmployeeId, division, department, lastname, verify);
    }

    private async Task OnPDFSaving(string EmployeeId, int division, int department, string lastname, string verify)
    {
        Console.WriteLine($"EmployeeId: {EmployeeId}");
        Console.WriteLine($"division: {division}");
        Console.WriteLine($"department: {department}");
        Console.WriteLine($"lastname: {lastname}");
        Console.WriteLine($"verify: {verify}");

        foreach (var formdata in DocuEmployees)
        {
            await ImageService.AttachedFile(formdata, EmployeeId, division, department, lastname, verify);
        }
    }

    async Task CreatePrimaryRecords(string employeeVerifyId)
    {
        //primary
        var validRecords = listOfPrimary
            .Where
            (pri => !string.IsNullOrEmpty(pri.PriSchoolName) || !string.IsNullOrEmpty(pri.PriSchoolLoc)
                 || !string.IsNullOrEmpty(pri.PriAward) || !string.IsNullOrEmpty(pri.PriSchoolYear))
            .ToList();
        if (validRecords.Count == 0)
        {
            return;
        }
        foreach (var pri in validRecords)
        {
            pri.Verify_Id = employeeVerifyId;
            await EducationService.CreatePrimary(pri);
        }

        listOfPrimary.Clear();
        AddNewPrimary(employeeVerifyId);
    }


    async Task CreateSecondaryRecords(string employeeVerifyId)
    {
        //secondary
        var validSecodary = listOfSecondary
           .Where
           (sec => !string.IsNullOrEmpty(sec.SecSchoolName) || !string.IsNullOrEmpty(sec.SecSchoolLoc)
                || !string.IsNullOrEmpty(sec.SecAward) || !string.IsNullOrEmpty(sec.SecSchoolYear))
           .ToList();
        if (validSecodary.Count == 0)
        {
            return;
        }
        foreach (var sec in validSecodary)
        {
            sec.Verify_Id = employeeVerifyId;
            await EducationService.CreateSecondary(sec);
        }

        listOfSecondary.Clear();
        AddNewSecondary(employeeVerifyId);
    }

    async Task CreateSeniorHSRecords(string employeeVerifyId)
    {  //shs
        var validShs = listOfShs
           .Where
           (shs => !string.IsNullOrEmpty(shs.ShsSchoolName) || !string.IsNullOrEmpty(shs.ShsSchoolLoc)
                || !string.IsNullOrEmpty(shs.ShsAward) || !string.IsNullOrEmpty(shs.ShsSchoolYear))
           .ToList();
        if (validShs.Count == 0)
        {
            return;
        }
        foreach (var shs in validShs)
        {
            shs.Verify_Id = employeeVerifyId;
            await EducationService.CreateSeniorHS(shs);
        }

        listOfShs.Clear();
        AddNewShs(employeeVerifyId);
    }

    async Task CreateCollegeRecords(string employeeVerifyId)
    {
        //college
        var validCollege = listOfCollege
           .Where
           (coll => !string.IsNullOrEmpty(coll.CollSchoolName) || !string.IsNullOrEmpty(coll.CollSchoolLoc)
                || !string.IsNullOrEmpty(coll.CollAward) || !string.IsNullOrEmpty(coll.CollSchoolYear)
                || !string.IsNullOrEmpty(coll.CollCourse))
           .ToList();
        if (validCollege.Count == 0)
        {
            return;
        }
        foreach (var coll in validCollege)
        {
            coll.Verify_Id = employeeVerifyId;
            await EducationService.CreateCollege(coll);
        }

        listOfCollege.Clear();
        AddNewCollege(employeeVerifyId);

    }

    async Task CreateMasteralRecords(string employeeVerifyId)
    {
        //masteral
        var validMasteral = listOfMasteral
           .Where
           (mas => !string.IsNullOrEmpty(mas.MasSchoolName) || !string.IsNullOrEmpty(mas.MasSchoolLoc)
                || !string.IsNullOrEmpty(mas.MasAward) || !string.IsNullOrEmpty(mas.MasSchoolYear)
                || !string.IsNullOrEmpty(mas.MasCourse))
           .ToList();
        if (validMasteral.Count == 0)
        {
            return;
        }
        foreach (var mas in validMasteral)
        {
            mas.Verify_Id = employeeVerifyId;
            await EducationService.CreateMasteral(mas);
        }

        listOfMasteral.Clear();
        AddNewMasteral(employeeVerifyId);
    }

    async Task CreateDoctorateRecords(string employeeVerifyId)
    {
        //doctorate
        var validDoctorate = listOfDoctorate
           .Where
           (doc => !string.IsNullOrEmpty(doc.DocSchoolName) || !string.IsNullOrEmpty(doc.DocSchoolLoc)
                || !string.IsNullOrEmpty(doc.DocAward) || !string.IsNullOrEmpty(doc.DocSchoolYear)
                || !string.IsNullOrEmpty(doc.DocCourse))
           .ToList();
        if (validDoctorate.Count == 0)
        {
            return;
        }
        foreach (var doc in validDoctorate)
        {
            doc.Verify_Id = employeeVerifyId;
            await EducationService.CreateDoctorate(doc);
        }

        listOfDoctorate.Clear();
        AddNewDoctorate(employeeVerifyId);
    }

    async Task CreateOtherEducRecords(string employeeVerifyId)
    {
        //othereduc
        var validothers = listOfOthers
           .Where
           (other => !string.IsNullOrEmpty(other.OthersSchoolType) || !string.IsNullOrEmpty(other.OthersSchoolName)
                || !string.IsNullOrEmpty(other.OthersSchoolLoc) || !string.IsNullOrEmpty(other.OthersAward)
                || !string.IsNullOrEmpty(other.OthersSchoolYear) || !string.IsNullOrEmpty(other.OthersCourse))
           .ToList();
        if (validothers.Count == 0)
        {
            return;
        }
        foreach (var others in validothers)
        {
            others.Verify_Id = employeeVerifyId;
            await EducationService.CreateOtherEduc(others);
        }

        listOfOthers.Clear();
        AddNewOthers(employeeVerifyId);
    }

    async Task CreateLicenses(string employeeVerifyId)
    {
        //training
        var validLicenses = listofLicense
           .Where
           (license =>
                !string.IsNullOrEmpty(license.Examination) ||
                !string.IsNullOrEmpty(license.ProfMembership) ||
                !string.IsNullOrEmpty(license.LicenseNo))
           .ToList();
        if (validLicenses.Count == 0)
        {
            return;
        }
        foreach (var license in validLicenses)
        {
            license.Verify_Id = employeeVerifyId;
            await LicenseTrainingService.CreateLicense(license);
        }

        listofLicense.Clear();
        AddNewLicense(employeeVerifyId);
    }

    async Task CreateTrainings(string employeeVerifyId)
    {
        //training
        var validtraining = listOfTrainings
           .Where
           (train => !string.IsNullOrEmpty(train.TrainingName)
                || !string.IsNullOrEmpty(train.Remarks))
           .ToList();
        if (validtraining.Count == 0)
        {
            return;
        }
        foreach (var train in validtraining)
        {
            train.Verify_Id = employeeVerifyId;
            await LicenseTrainingService.CreateTraining(train);
        }

        listOfTrainings.Clear();
        AddNewTrainings(employeeVerifyId);
    }

    public void AddNewPrimary(string employeeVerifyId)
    {
        if (listOfPrimary.Count <= 5)
        {
            listOfPrimary.Add(new PrimaryT { Verify_Id = employee.Verify_Id });
        }
    }

    public void RemovePrimary()
    {
        if (listOfPrimary.Count > 0)
        {
            listOfPrimary.RemoveAt(listOfPrimary.Count - 1);
        }
    }
    public void AddNewSecondary(string employeeVerifyId)
    {
        if (listOfSecondary.Count <= 3)
        {
            listOfSecondary.Add(new SecondaryT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveSecondary()
    {
        if (listOfSecondary.Count <= 1) { }
        else
        {
            listOfSecondary.RemoveAt(listOfSecondary.Count - 1);
        }
    }

    public void AddNewShs(string employeeVerifyId)
    {
        if (listOfShs.Count <= 2)
        {
            listOfShs.Add(new SeniorHST { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveShs()
    {
        if (listOfShs.Count <= 1) { }
        else
        {
            listOfShs.RemoveAt(listOfShs.Count - 1);
        }
    }

    public void AddNewCollege(string employeeVerifyId)
    {
        if (listOfCollege.Count <= 2)
        {
            listOfCollege.Add(new CollegeT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveCollege()
    {
        if (listOfCollege.Count <= 1) { }
        else
        {
            listOfCollege.RemoveAt(listOfCollege.Count - 1);
        }
    }

    public void AddNewMasteral(string employeeVerifyId)
    {
        if (listOfMasteral.Count <= 2)
        {
            listOfMasteral.Add(new MasteralT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveMasteral()
    {
        if (listOfMasteral.Count <= 1) { }
        else
        {
            listOfMasteral.RemoveAt(listOfMasteral.Count - 1);
        }
    }

    public void AddNewDoctorate(string employeeVerifyId)
    {
        if (listOfDoctorate.Count <= 2)
        {
            listOfDoctorate.Add(new DoctorateT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveDoctorate()
    {
        if (listOfDoctorate.Count <= 1) { }
        else
        {
            listOfDoctorate.RemoveAt(listOfDoctorate.Count - 1);
        }
    }

    public void AddNewOthers(string employeeVerifyId)
    {
        if (listOfOthers.Count <= 4)
        {
            listOfOthers.Add(new OtherEducT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveOthers()
    {
        if (listOfOthers.Count <= 1) { }
        else
        {
            listOfOthers.RemoveAt(listOfOthers.Count - 1);
        }
    }

    public void AddNewLicense(string employeeVerifyId)
    {
        if (listofLicense.Count <= 5)
        {
            listofLicense.Add(new LicenseT { Verify_Id = employee.Verify_Id });
            StateHasChanged(); 
        }
    }

    public void RemoveLicense()
    {
        if (listofLicense.Count <= 1) { }
        else
        {
            listofLicense.RemoveAt(listofLicense.Count - 1);
        }
    }

    public void AddNewTrainings(string employeeVerifyId)
    {
        if (listOfTrainings.Count <= 5)
        {
            listOfTrainings.Add(new TrainingT { Verify_Id = employee.Verify_Id });
        }
    }
    public void RemoveTrainings()
    {
        if (listOfTrainings.Count <= 1) { }
        else
        {
            listOfTrainings.RemoveAt(listOfTrainings.Count - 1);
        }
    }

    public void AddNewDocument()
    {
        if (listOfDocuments.Count <= 9)
        {
            listOfDocuments.Add(new DocumentT());
        }
    }


    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }
}
