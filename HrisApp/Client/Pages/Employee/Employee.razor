@page "/employee"
@inject IToastService _toastService
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime
@inject EmployeeVM _employeeVM
@inject DTOEmployeeExport _crrExport

@attribute [Authorize(Roles = "System Administrator, HR, User")]

<PageTitle>Employee Management</PageTitle>
<div class="mb-5">
    <div class="d-flex flex-row mt-5 justify-content-between align-items-center">
        <span style="font-size: x-large;font-weight: 600;color: #424242;">Employee List</span>
        <AuthorizeView Roles="HR, System Administrator">
            <Authorized>
                <MudButton Variant="Variant.Outlined" Color="Color.Info" EndIcon="@Icons.Material.Filled.ImportExport" OnClick="OnExporttoExcel">Export to Excel</MudButton>
                <MudButton OnClick="@_employeeVM.CreateNewEmployee" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.PersonAdd" Class="btnadd">Add Employee</MudButton>
            </Authorized>
        </AuthorizeView>
    </div>
</div>
<div class="box w-auto">
    <div class="d-flex flex-grow-1 mt-3 mb-3">
        <div class="d-flex flex-grow-1 flex-wrap justify-content-between">
            <div class="d-flex gap-3 flex-grow-1 flex-wrap">
                <MudItem xs="12" lg="3">
                    <MudSelect class="dddiv" T="int" ValueChanged="@_employeeVM.SearchStatus" Margin="Margin.Dense" DisableUnderLine>
                        <MudSelectItem Value=0>All Status</MudSelectItem>
                        @foreach (var item in _employeeVM.StatusL)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDateRangePicker Class="daterangepicker" Label="Date Hired" DateRangeChanged="@_employeeVM.EmpDateRangeChange" PlaceholderStart="Start Date" PlaceholderEnd="End Date" />
                </MudItem>
            </div>
            <MudItem xs="12" lg="4">
                <MudTextField DisableUnderLine @bind-Value="@_employeeVM._searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="tsearch" Immediate=true Margin="Margin.Dense" />
             </MudItem>
         </div>
     </div>
    @if (_employeeVM._employeeList == null || _employeeVM._employeeList.Count == 0)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" hidden="@_employeeVM._isVisible" />

        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="auto" hidden="@_employeeVM._isVisible" />
        <MudCardContent hidden="@_employeeVM._isVisible">
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width= "100%" />
        </MudCardContent>
        <MudCardActions hidden="@_employeeVM._isVisible" >
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions  Visible="@_employeeVM._isVisible">
    }
    else
    {
        <MudTable Class="stable" Items="@_employeeVM._employeeList" Context="employeeee" SortLabel="Sort By" FixedHeader="true" Elevation="0" Height="605px" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<EmployeeT,bool>(_employeeVM.FilterFunc1)" @bind-SelectedItem="@_employeeVM._selectedItem1" Virtualize="true">
             <HeaderContent>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">
                     <MudTableSortLabel SortBy="new Func<EmployeeT, object>(x=>x.FirstName)">
                         Full Name
                     </MudTableSortLabel>
                 </MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">
                     <MudTableSortLabel SortBy="new Func<EmployeeT, object>(x=>x.EmployeeNo)">
                         ID No.
                     </MudTableSortLabel>
                 </MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Position</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Division</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Department</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">
                     <MudTableSortLabel SortBy="new Func<EmployeeT, object>(x=>x.DateHired)">
                         Date Hired
                     </MudTableSortLabel>
                 </MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px; text-align:center;">
                     <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EmployeeT, object>(x=>x.StatusId)">
                         Status
                     </MudTableSortLabel>
                 </MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold; font-size: 16px;">Action</MudTh>
             </HeaderContent>
             <RowTemplate>
             <MudTd DataLabel="Full Name">
                     <div class="d-flex flex-row align-items-center gap-3">
                         <div class="d-flex align-items-center">
                            <EmployeeAvatar verify="@employeeee.Verify_Id" />
                        </div>
                     <div>
                         <div class="flex-column">
                                 <div>@_employeeVM.CapitalizeFirstLetter(employeeee.FirstName)  @(employeeee.MiddleName != "" ? $"{employeeee.MiddleName[0].ToString().ToUpper()}." : "")  @_employeeVM.CapitalizeFirstLetter(employeeee.LastName)</div>
                                 <div style="font-weight: bold;">@employeeee.Email</div> 
                         </div>
                     </div>
                 </div>

             </MudTd>
                 <MudTd DataLabel="Position">@employeeee.EmployeeNo</MudTd>
                 <MudTd DataLabel="Position">@employeeee.Position?.Name</MudTd>
                 <MudTd DataLabel="Division">@employeeee.Division?.Name
                     @* |
                     @if (employeeee.SectionId == 0)
                    {
                        <MudChip Class="statusChip">No Section</MudChip>
                    }
                    else
                    {
                        @foreach (var item in SectionsL)
                        {
                            @if (item.Id == employeeee.SectionId)
                            {
                                <MudChip Class="statusChip">@item.Name</MudChip>
                            }
                        }
                    } *@
                    
                        
             </MudTd>
                 <MudTd DataLabel="Department">@employeeee.Department?.Name</MudTd>
                 <MudTd DataLabel="Date Hired">@employeeee.DateHired.ToString("MM/dd/yyyy")</MudTd>
                 <MudTd DataLabel="Status" Style="text-align: center;">
                     <MudChip Class="@_employeeVM.StatusChipColor(employeeee.Status?.Name)">@employeeee.Status?.Name</MudChip>
             </MudTd>
                 <MudTd>
                     <AuthorizeView Roles="HR, System Administrator">
                         <Authorized>
                             <MudTooltip Text="View Details">
                                <MudIconButton Class="btnShow" OnClick="(() => _employeeVM.ShowEmployee(employeeee.Id))" Icon="@Icons.Material.Rounded.Info" aria-label="Show"></MudIconButton>
                             </MudTooltip>
                         </Authorized>
                         <NotAuthorized>
                            <MudIconButton Disabled Class="btnShow" OnClick="(() => _employeeVM.ShowEmployee(employeeee.Id))" Icon="@Icons.Material.Rounded.Info" aria-label="Show"></MudIconButton>
                         </NotAuthorized>
                     </AuthorizeView>
                 </MudTd>
             </RowTemplate>
             <PagerContent>
                 <MudTablePager PageSizeOptions="new int[] { 10, 25, int.MaxValue }" InfoFormat="@($"Right {@_employeeVM._infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
             </PagerContent>
         </MudTable>
    } 
</div>

@code {

    protected override async Task OnInitializedAsync()
    {
        await _employeeVM.OnRefreshPage();
    }

    public async Task OnExporttoExcel()
    {
        try
        {
            
            
            var fileBytes = await _crrExport.createExcelPackage(_employeeVM._employeeList);
            var fileName = $"CRR{DateTime.Now.ToString("yyyy-MM-dd")}.xlsx";
            await JSRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            //NavigateError();
        }

    }
}