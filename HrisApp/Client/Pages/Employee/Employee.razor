@page "/employee"
@inject IDivisionService DivisionService
@inject IDepartmentService DepartmentService
@inject ISectionService SectionService
@inject IPositionService PositionService
@inject IAddressService AddressService
@inject IAreaService AreaService
@inject IEmployeeService EmployeeService
@inject IToastService _toastService
@inject IImageService ImageService
@inject IEducationService EducationService
@inject IPayrollService PayrollService
@inject ILicenseTrainingService LicenseTrainingService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService _toastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Employees</PageTitle>

<div class="mb-5 mt-3">
    <div class="d-flex flex-row mt-5 justify-content-between">
        <h3 class="m-0">Employee List</h3>

        @if (userRole == "Admin")
        {
                    <MudButton OnClick="CreateNewEmployee" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.PersonAdd" Class="btnadd">Add Employee</MudButton>
        }
    </div>
</div>

<div class="box w-auto">
    <MudTable Class="stable" Items="employeeList" FixedHeader="true" Elevation="0" Height="620px" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<EmployeeT,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

        <ToolBarContent>
            <div class="d-flex flex-grow-1 mb-3">
                <div class="d-flex flex-grow-1 flex-wrap justify-content-between">
                    <MudItem xs="12" lg="3">
                        @* <MudSelect class="dddiv" T="int" ValueChanged="searchh" Margin="Margin.Dense" DisableUnderLine>
                            <MudSelectItem Value=0>All Division</MudSelectItem>
                            @foreach (var div in Divisions)
                            {
                                <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
                            }
                        </MudSelect> *@
                    </MudItem>
                    <MudItem xs="12" lg="4">
                        <MudTextField DisableUnderLine @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="tsearch mb-5" Immediate=true Margin="Margin.Dense" />
                     </MudItem>
                 </div>
             </div>
         </ToolBarContent>
         <HeaderContent>
             <MudTh Class="col-4" Style="background: #e9ecef;">
                 <MudTh Class="col-4 tablehead" Style="font-weight: bold; background: #e9ecef;">Department</MudTh>
                 <MudTh Class="tablehead" Style="background: #e9ecef;">Action</MudTh>
             </MudTh>
             
         </HeaderContent>

    </MudTable>
</div>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    string? userRole;

    protected override async Task OnInitializedAsync()
    {
        var auth = await authState;
        userRole = auth.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
    }



    //TABLEEES
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString1 = "";
    List<EmployeeT> employeeList = new List<EmployeeT>();
    private EmployeeT selectedItem1 = null;
    private HashSet<EmployeeT> selectedItems = new HashSet<EmployeeT>();

    private bool FilterFunc1(EmployeeT emp) => FilterFunc(emp, searchString1);

    private bool FilterFunc(EmployeeT emp, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (emp.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    //END FOR TABLES

    void CreateNewEmployee() => NavigationManager.NavigateTo("/employee/add");
}
