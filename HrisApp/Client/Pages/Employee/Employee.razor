@page "/employee"
@inject IDivisionService DivisionService
@inject IDepartmentService DepartmentService
@inject ISectionService SectionService
@inject IPositionService PositionService
@inject IAddressService AddressService
@inject IAreaService AreaService
@inject IEmployeeService EmployeeService
@inject IToastService _toastService
@inject IImageService ImageService
@inject IEducationService EducationService
@inject IPayrollService PayrollService
@inject ILicenseTrainingService LicenseTrainingService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService _toastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Employees</PageTitle>

<div class="mb-5 mt-3">
    <div class="d-flex flex-row mt-5 justify-content-between">
        <h3 class="m-0">Employee List</h3>

        @if (userRole == "Admin")
        {
                    <MudButton OnClick="CreateNewEmployee" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.PersonAdd" Class="btnadd">Add Employee</MudButton>
        }
    </div>
</div>


<div class="box w-auto">
    @if (EmployeeService.EmployeeTs == null || EmployeeService.EmployeeTs.Count == 0) 
     { 
       <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="auto" />
        <MudCardContent>
            <MudSkeleton Width="30%" Height="42px;" />
            <MudSkeleton Width="80%" />
            <MudSkeleton Width="100%" />
        </MudCardContent>
        <MudCardActions>
            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
        </MudCardActions>
        <MudOverlay Visible="isVisible" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        </MudOverlay> 
    }
    else
    {
    <MudTable Class="stable" Items="employeeList" Context="employeeee" FixedHeader="true" Elevation="0" Height="620px" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<EmployeeT,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">

            <ToolBarContent>
                <div class="d-flex flex-grow-1 mb-3">
                    <div class="d-flex flex-grow-1 flex-wrap justify-content-between">
                        <MudItem xs="12" lg="3">
                            @* <MudSelect class="dddiv" T="int" ValueChanged="searchh" Margin="Margin.Dense" DisableUnderLine>
                        <MudSelectItem Value=0>All Division</MudSelectItem>
                        @foreach (var div in Divisions)
                        {
                        <MudSelectItem Value="@div.Id">@div.Name</MudSelectItem>
                        }
                        </MudSelect> *@
                        </MudItem>
                        <MudItem xs="12" lg="4">
                            <MudTextField DisableUnderLine @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="tsearch mb-5" Immediate=true Margin="Margin.Dense" />
                         </MudItem>
                     </div>
                 </div>
             </ToolBarContent>
             <HeaderContent>
                 <MudTh Style="background: #e9ecef; font-weight: bold;">Full Name</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold;">Date Hired</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold;">Position</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold;">Division | Department | Section</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold;">Status</MudTh>
                 <MudTh Style="background: #e9ecef; font-weight: bold;">Action</MudTh>
             </HeaderContent>
             <RowTemplate>
             <MudTd DataLabel="Full Name">
                     <div class="d-flex flex-row align-items-center gap-2">
                         <div>
                        <EmployeeAvatar verify="@employeeee.Verify_Id" />
                     </div>
                     <div>
                         <div class="flex-column">
                                 <div>@CapitalizeFirstLetter(employeeee.FirstName)  @employeeee.MiddleName[0].ToString().ToUpper().  @CapitalizeFirstLetter(employeeee.LastName)</div>
                                 <div style="font-weight: bold;">@employeeee.Email</div> 
                         </div>
                     </div>
                 </div>
               
                 
             </MudTd>
             <MudTd DataLabel="Date Hired">@employeeee.DateHired.ToString("d")</MudTd>
             <MudTd DataLabel="Position">@employeeee.Position?.Name</MudTd>
             <MudTd DataLabel="Disignation">
                     <MudChip Style="background-color: #B7D3DF">@employeeee.Division?.Name</MudChip> | <MudChip Style="background-color: #AEBDCA">@employeeee.Department.Name</MudChip> | <MudChip Class="statusChip">@employeeee.Section.Name </MudChip>
             </MudTd>
                 <MudTd DataLabel="Status">
                     <MudChip Class="@StatusChipColor(employeeee.Status?.Name)">@employeeee.Status?.Name</MudChip>
             </MudTd>
                 <MudTd>
                     <MudTooltip Text="Show Details">
                         <MudIconButton Class="btnedit" OnClick="(() => ShowEmployee(employeeee.Id))" Icon="@Icons.Material.Rounded.RemoveRedEye" aria-label="Edit"></MudIconButton>
                     </MudTooltip>
                 </MudTd>
             </RowTemplate>
             <PagerContent>
                 <MudTablePager PageSizeOptions="new int[] { 10, 25, int.MaxValue }" InfoFormat="@($"Right {infoFormat}")" HorizontalAlignment="HorizontalAlignment.Right" />
             </PagerContent>
         </MudTable>
    } 
</div>



@code {

    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }
    string? userRole;

    private List<EmployeeT> EmployeesL = new List<EmployeeT>();
    private EmployeeT employeeee = new EmployeeT();

    private List<string> PDFDataList = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        var auth = await authState;
        userRole = auth.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;

        await EmployeeService.GetEmployee();
        employeeList = EmployeeService.EmployeeTs;
    }



    #region FUNCTIONS / METHODS
    private string StatusChipColor(string status)
    {
        switch (status)
        {
            case "Active":
                return "statusActiveChip";
            case "Awol":
                return "statusAwolChip";
            case "Inactive":
                return "statusInactiveChip";
            case "Resigned":
                return "statusResignedChip";
            case "Terminated":
                return "statusTerminatedChip";
            case "Retired":
                return "statusRetiredChip";
            default:
                return "statusRetiredChip";

        }
    
    }

    void CreateNewEmployee() => NavigationManager.NavigateTo("/employee/add");
    void ShowEmployee(int id) => NavigationManager.NavigateTo($"/employee/edit{id}");
    
    //LOADING
    private bool isVisible;
    public async void OpenOverlay()
    {
        isVisible = true;
        await Task.Delay(3000);
        isVisible = false;
        StateHasChanged();
    }

    private string CapitalizeFirstLetter(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return input;
        }

        return char.ToUpper(input[0]) + input.Substring(1);
    }
    #endregion

    #region TABLE VARIABLES
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString1 = "";
    List<EmployeeT> employeeList = new List<EmployeeT>();
    private EmployeeT selectedItem1 = null;
    private HashSet<EmployeeT> selectedItems = new HashSet<EmployeeT>();

    private bool FilterFunc1(EmployeeT emp) => FilterFunc(emp, searchString1);

    private bool FilterFunc(EmployeeT emp, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (emp.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (emp.MiddleName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (emp.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    #endregion


}
