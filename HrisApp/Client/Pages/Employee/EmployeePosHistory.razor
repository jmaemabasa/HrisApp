@page "/employeehistory"
<style>
    .stable {
        background: #e9ecef;
        border-radius: 20px;
    }

    .spantitle {
        font-weight: bold;
        color: #26446e;
        font-size: 16px;
    }
</style>

@if (empHistoryList.Count == 0 || empHistoryList == null)
{
    <div class="d-flex flex-grow-1 justify-content-between align-items-center">
        <span class="spantitle mb-3">No History.</span>
        <AuthorizeView Roles="CadAdmin, SysAdmin, HR">
            <Authorized>
                <button class="Btn" onclick="@(() => OpenDrawer(Anchor.End, "personalandjobOpen"))">

                    <div class="sign"><MudIcon Icon="@Icons.Material.Rounded.Add"></MudIcon></div>

                    <div class="text">Add</div>
                </button>
            </Authorized>
        </AuthorizeView>
    </div>
}
else
{
    <MudTable Class="stable" Items="empHistoryList" Context="history" FixedHeader="true" Elevation="0" HorizontalScrollbar="true" Dense="true" Hover="true" Bordered="false" Striped="true" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <div class="d-flex flex-grow-1 justify-content-between align-items-center">
                <span class="spantitle mb-3">Employee Position History</span>
                <AuthorizeView Roles="CadAdmin, SysAdmin, HR">
                    <Authorized>
                        <button class="Btn" onclick="@(() => OpenDrawer(Anchor.End, "personalandjobOpen"))">

                            <div class="sign"><MudIcon Icon="@Icons.Material.Rounded.Add"></MudIcon></div>

                            <div class="text">Add</div>
                        </button>
                    </Authorized>
                </AuthorizeView>
            </div>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="col-3" Style="background: #e9ecef; font-weight: bold; font-size: 16px;color: #424242;">Position</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold; font-size: 16px;color: #424242;">Started</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold; font-size: 16px;color: #424242;">Ended</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold; font-size: 16px;color: #424242;">Area</MudTh>
            <MudTh Class="col-2" Style="background: #e9ecef; font-weight: bold; font-size: 16px;color: #424242;">Department</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="">
                @foreach (var item in PositionsL)
                {
                    if (item.PosCode == history.newPositionCode)
                    {
                        @item.Name
                    }
                }
            </MudTd>
            <MudTd DataLabel="">@history.DateStarted?.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="">@history.DateEnded?.ToString("MM/dd/yyyy")</MudTd>
            <MudTd DataLabel="">
                @foreach (var item in AreasL)
                {
                    if (item.Id == history.NewAreaId)
                    {
                        @item.Name
                    }
                }
            </MudTd>
            <MudTd DataLabel="">
                @foreach (var item in DepartmentsL)
                {
                    if (item.Id == history.NewDepartmentId)
                    {
                        @item.Name
                    }
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudDrawer Class="drawerdetails" @bind-Open="@AddOpenDrawer" Width="@width" Height="@height" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary" Style=" margin: 10px;">
    <span class="spantitle mb-3">Position History</span>
    <MudItem xs="12">
        <EditForm Model="college" OnValidSubmit="SaveAdd" class="d-flex flex-column flex-grow-1" style="margin-top: 13px;">
            <DataAnnotationsValidator />
            <MudItem xs="12" Class="mb-2">
                <MudText Typo="Typo.body2">Area</MudText>
                <MudSelect Class="@slectClasssRela" DisableUnderLine @bind-Value="@college.NewAreaId" Margin="Margin.Dense">
                    <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                    @foreach (var sched in AreasL)
                    {
                        <MudSelectItem Value="@sched.Id">@sched.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudText Typo="Typo.body2">Division</MudText>
                <MudSelect Class="@slectClasssRela" DisableUnderLine @bind-Value="@college.NewDivisionId" Margin="Margin.Dense">
                    <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                    @foreach (var sched in DivisionL)
                    {
                        <MudSelectItem Value="@sched.Id">@sched.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudText Typo="Typo.body2">Department</MudText>
                <MudSelect Class="@slectClasssRela" DisableUnderLine @bind-Value="@college.NewDepartmentId" Margin="Margin.Dense">
                    <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                    @foreach (var item in DepartmentsL.Where(d => d.DivisionId == college.NewDivisionId))
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @{
                var departmentHasSection = college.NewDepartmentId != 0 && SectionsL.Any(s => s.DepartmentId == college.NewDepartmentId);
            }
            @if (departmentHasSection)
            {
                var sections = college.NewDepartmentId != 0 ? SectionsL.Where(s => s.DepartmentId == college.NewDepartmentId) : Enumerable.Empty<SectionT>();
                <MudItem xs="12" Class="mb-2">
                    <MudText Typo="Typo.body2">Section</MudText>
                    <MudSelect Class="@slectClasssRela" DisableUnderLine @bind-Value="@college.NewSectionId" Margin="Margin.Dense">
                        <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                        @if (sections.Any())
                        {
                            @foreach (var sect in sections)
                            {
                                <MudSelectItem Value="@sect.Id">@sect.Name</MudSelectItem>
                            }
                        }
                        else
                        {
                            <MudSelectItem Value="0">&nbsp;</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" Class="mb-2">
                    <MudText Typo="Typo.body2">Position</MudText>
                    <MudSelect Class="@slectClasssRela" DisableUnderLine @bind-Value="@college.NewPositionId" Margin="Margin.Dense">
                        <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                        @foreach (var sched in PositionsL.Where(d => d.DivisionId == college.NewDivisionId && d.DepartmentId == college.NewDepartmentId && d.SectionId == college.NewSectionId))
                        {
                            <MudSelectItem Value="@sched.Id">@sched.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" Class="mb-2">
                    <MudText Typo="Typo.body2">Position</MudText>
                    <MudSelect Class="@slectClasssRela" DisableUnderLine @bind-Value="@college.NewPositionId" Margin="Margin.Dense">
                        <MudSelectItem Value=0 Disabled>---Select---</MudSelectItem>
                        @foreach (var sched in PositionsL.Where(d => d.DivisionId == college.NewDivisionId && d.DepartmentId == college.NewDepartmentId))
                        {
                            <MudSelectItem Value="@sched.Id">@sched.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }


            <MudItem xs="12" Class="mb-2">
                <MudText Typo="Typo.body2">Date Started</MudText>
                <MudDatePicker Class="txf" @bind-Date="college.DateStarted" DisableUnderLine Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" Class="mb-2">
                <MudText Typo="Typo.body2">Date Ended</MudText>
                <MudDatePicker Class="txf" @bind-Date="college.DateEnded" DisableUnderLine Margin="Margin.Dense" />
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-content-center mt-5">
                <MudButton EndIcon="@Icons.Material.Rounded.Save" Class="btnnext" ButtonType="ButtonType.Submit">SAVE</MudButton>
            </MudItem>
        </EditForm>
    </MudItem>
</MudDrawer>

@code {
    #nullable disable
    //TABLEEES
    List<Emp_PosHistoryT> empHistoryList = new();
    private Emp_PosHistoryT selectedItem1 = null;

    private List<AreaT> AreasL = new();
    private List<DivisionT> DivisionL = new();
    private List<SectionT> SectionsL = new();
    private List<DepartmentT> DepartmentsL = new();
    private List<SubPositionT> SubPositionsL = new();
    private List<PositionT> PositionsL = new();

    private readonly Emp_PosHistoryT college = new();
    [Parameter]
    public string VerifyCode { get; set; }

    #region DRAWER VARIBALES AND FUNCTIONS
    private string slectClasssRela = "frmselect";

    bool AddOpenDrawer;
    Anchor anchor;
    string width = "500px", height = "100%";

    void OpenDrawer(Anchor anchor, string drawerx)
    {
        AddOpenDrawer = (drawerx == "personalandjobOpen");
        this.anchor = anchor;
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await AreaService.GetArea();
        AreasL = AreaService.AreaTs;
        await DepartmentService.GetDepartment();
        DepartmentsL = DepartmentService.DepartmentTs;
        await DivisionService.GetDivision();
        DivisionL = DivisionService.DivisionTs;
        await SectionService.GetSection();
        SectionsL = SectionService.SectionTs;
        await PositionService.GetSubPosition();
        await PositionService.GetPosition();
        SubPositionsL = PositionService.SubPositionTs;
        PositionsL = PositionService.PositionTs;
    }

    private async Task LoadList()
    {
        empHistoryList = await EmpHistoryService.GetEmpHistoryList(VerifyCode);
        StateService.SetState("HistoryPosList", empHistoryList);
    }

    private void OnStateChanged()
    {
        empHistoryList = StateService.GetState<List<Emp_PosHistoryT>>("HistoryPosList");
        StateHasChanged();
    }

    private async Task SaveAdd()
    {
        college.Verify_Id = VerifyCode;
        college.DateModified = DateTime.Now;
        foreach (var item in PositionsL)
        {
            if (item.Id == college.NewPositionId)
            {
                college.newPositionCode = item.PosCode;
            }
        }
        await EmpHistoryService.CreateEmpHistory(college);


        empHistoryList = await EmpHistoryService.GetEmpHistoryList(VerifyCode);
        AddOpenDrawer = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // empHistoryList = await EmpHistoryService.GetEmpHistoryList(VerifyCode);
            StateService.OnChange += OnStateChanged;
            await LoadList();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
