@using Blazored.Toast.Configuration;
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService
@inject GlobalConfigService GlobalConfigService
@inject IToastService _toastService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<style>
    /*.mud-drawer.mud-drawer-mini.mud-drawer-pos-left.mud-drawer--open {
        background: #e9ecef;
        border: none;
        box-shadow: -5px -5px 10px #ffffff, 5px 13px 20px #cacdcf;
        border-radius: 20px;
        height: 95vh;
        left: 15px;
        top: 15px;
    }*/

    /*.mud-drawer.mud-drawer-mini.mud-drawer-pos-left.mud-drawer--closed {
        background: #e9ecef;
        border: none;
        box-shadow: -5px -5px 10px #ffffff, 5px 13px 20px #cacdcf;
        border-radius: 20px;
        height: 95vh;
        left: 15px;
        top: 15px;
        width: 4rem;
    }*/

    .mud-container.mud-container-maxwidth-xxl {
        padding-left: 60px;
        padding-right: 35px;
        margin-top: 15px;
    }

    .mud-appbar.mud-appbar-fixed-top.mud-elevation-0{
        /*background-color: #e9ecef;*/
/*        color: #27374D;
*/        left: 15px;
        margin-bottom: 25px;
    }

    .mud-appbar .mud-toolbar-appbar {
        padding: 0px !important;
        align-items: center;
        width: calc(100% - 80px) !important; 
        padding-left: 26px !important;
        padding-top: 15px !important;
    }

    .btnburger {
        /*background: #e9ecef;*/
        border: none;
        box-shadow: -5px -5px 23px #ffffff, 5px 5px 12px #cacdcf;
        border-radius: 10px;
    }


    
</style>

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
@* #EEF1F6  #031a5a*@

<MudLayout>
    @* <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudAppBar Elevation="0" Style="left: 45px; width: max-content; margin-right: 35px;">
            <MudIconButton Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            @* <span style="font-weight: 600;font-size: 1.4rem;">Good Afternoon, @GlobalConfigService.Fullname.Split(' ')[0]</span> *@
            

             @*<MudSpacer />

        </MudAppBar>
    </MudHidden> *@

    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudAppBar Elevation="0" Style="left: 45px;">
            <MudIconButton Class="" Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            @* <button class="btn btn-primary" @onclick="ToggleTheme">Toggle Theme</button>
            <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" /> *@
            <MudTooltip Text="Settings">
                <MudMenu Class="btnburger" Icon="@Icons.Material.Filled.ManageAccounts" Color="Color.Inherit" AnchorOrigin="Origin.TopLeft">
                    <MudMenuItem OnClick="OpenChangePass" Icon="@Icons.Material.Filled.Password" IconSize="Size.Small">Change Password</MudMenuItem>
                    <MudMenuItem OnClick="Logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" IconSize="Size.Small" Style="color:#E97777">Sign Out</MudMenuItem>
                </MudMenu>
            </MudTooltip>
        </MudAppBar>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudAppBar Elevation="0" Style="left: 0; width: max-content; padding-right: 15px; padding-left: 15px; ">
            <MudIconButton Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            @* My Application *@

            <MudSpacer />

        </MudAppBar>
    </MudHidden>
    

    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudDrawer @bind-Open="@_drawerOpen" Fixed="true" Elevation="0" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" Class="sidebarmenu">
            @if (_drawerOpen == true)
            {
                <a href="/dashboard">
                    <MudDrawerHeader>
                        <MudImage Src="./images/SonicSales.png" Fluid=true Style="width: 80%;" Class="mb-3 mt-1" />
                    </MudDrawerHeader>
                </a>
            }
            else
            {
                <a href="/dashboard">
                    <MudDrawerHeader Style="padding: 15px 0px 10px 12px">
                        <MudImage Src="./images/logo.png" Fluid=true Style="width: 80%;" Class="mb-3 mt-1" />
                    </MudDrawerHeader>
                </a>
            }
            <NavMenu />
        </MudDrawer>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudDrawer @bind-Open="@_drawerOpen" Fixed="true" Elevation="0" Class="sidebarmenu">
            <MudDrawerHeader>
                <MudImage Src="./images/SonicSales.png" Fluid=true Style="width: 80%;" Class="mb-3 mt-1" />
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
    </MudHidden>
    
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="padding-right: 15px; padding-left: 15px">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudHidden>
</MudLayout>

<BlazoredToasts Position="ToastPosition.BottomRight" Timeout="10" IconType="IconType.FontAwesome" SuccessClass="success-toast-override" SuccessIcon="fa fa-thumbs-up" ErrorIcon="fa fa-bug"   />

@code {
    bool _drawerOpen = false;

    void DrawerToggle()
    {
        if (_drawerOpen == false)
            _drawerOpen = true;
        else
            _drawerOpen = !_drawerOpen;

    }

    private bool _isDarkMode;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InitializeInactivityTimer(DotNetObjectReference.Create(this));
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        await JSRuntime.InvokeVoidAsync("themeToggle", _isDarkMode);
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Blue.Darken4,
                // Secondary = Colors.Green.Accent4,
                AppbarBackground = "#E9ECEF",
                AppbarText = "#27374D",
                Background = "#E9ECEF",
                BackgroundGrey = "E9ECEF",
                DrawerBackground = "E9ECEF",
                DrawerText = "#424242",
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Blue.Lighten1,
                AppbarBackground = "#24222D",
                AppbarText = "#FAFAF5",
                Background = "#24222D",
                BackgroundGrey = "#2B2934",
                DrawerBackground = "#111315",
                DrawerText = "#FAFAF5",
            },


        };

    [JSInvokable]
    public async Task Logout()
    {
        try
        {
            var id = Convert.ToInt32(GlobalConfigService.User_Id);
            await AuthService.UpdateLoginStatus(id);

            await LocalStorage.RemoveItemAsync("token");
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("/", true);

        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
            return;
        }
    }

    private void OpenChangePass()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = true };
        DialogService.Show<ChangePassDialog>("", options);
    }
}