@using Blazored.Toast.Configuration;
@using System.Timers;
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService
@inject GlobalConfigService GlobalConfigService
@inject IToastService _toastService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject IImageService ImageService
@inject IEmployeeService EmployeeService
@inject ILeaveHistoryService LeaveHistoryService

<style>
    /*.mud-drawer.mud-drawer-mini.mud-drawer-pos-left.mud-drawer--open {
        background: #e9ecef;
        border: none;
        box-shadow: -5px -5px 10px #ffffff, 5px 13px 20px #cacdcf;
        border-radius: 20px;
        height: 95vh;
        left: 15px;
        top: 15px;
    }*/

    /*.mud-drawer.mud-drawer-mini.mud-drawer-pos-left.mud-drawer--closed {
        background: #e9ecef;
        border: none;
        box-shadow: -5px -5px 10px #ffffff, 5px 13px 20px #cacdcf;
        border-radius: 20px;
        height: 95vh;
        left: 15px;
        top: 15px;
        width: 4rem;
    }*/

    .mud-container.mud-container-maxwidth-xxl {
        padding-left: 60px;
        padding-right: 35px;
        margin-top: 15px;
    }

    .mud-appbar.mud-appbar-fixed-top.mud-elevation-0{
        /*background-color: #e9ecef;*/
/*        color: #27374D;
*/        left: 15px;
        margin-bottom: 25px;
    }

    .mud-appbar .mud-toolbar-appbar {
        padding: 0px !important;
        align-items: center;
        width: calc(100% - 80px) !important; 
        padding-left: 26px !important;
        padding-top: 15px !important;
    }

    .btnburger {
        /*background: #e9ecef;*/
        border: none;
        /* box-shadow: -2px 1px 6px #ffffff, 3px 4px 9px #b3b4b5; */
        box-shadow: -5px -5px 10px #ffffff, 5px 5px 10px #cacdcf;
        border-radius: 50%;
        transition: all .5s ease;
        height: 40px;
    }

</style>

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="MyCustomTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
@* #EEF1F6  #031a5a*@

<MudLayout>
    @* <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudAppBar Elevation="0" Style="left: 45px; width: max-content; margin-right: 35px;">
            <MudIconButton Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            @* <span style="font-weight: 600;font-size: 1.4rem;">Good Afternoon, @GlobalConfigService.Fullname.Split(' ')[0]</span> *@
            

             @*<MudSpacer />

        </MudAppBar>
    </MudHidden> *@

    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudAppBar Elevation="0" Style="left: 45px;">
            <MudIconButton Class="" Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            @* <button class="btn btn-primary" @onclick="ToggleTheme">Toggle Theme</button>
            <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" /> *@
            @html
            <MudMenu Class="notifmenu" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudTooltip Text="Notifications">
                        @* <MudBadge Content="@badgeCount" Color="Color.Error" Overlap="true" Bordered="true" Class="me-4 notifbadge">
                            <MudIcon Icon="@Icons.Material.Rounded.CircleNotifications" Size="Size.Large" Color="Color.Default" />
                        </MudBadge> *@
                        <button class="notifbadge me-3">
                            <MudIcon Style="font-size: 3rem;" Icon="@Icons.Material.Rounded.CircleNotifications"></MudIcon>
                            @if (badgeCount != 0)
                            {
                                <div class="notificationbadge notifbadgecount">@badgeCount</div>

                            }
                        </button>
                    </MudTooltip>
                </ActivatorContent>
                <ChildContent>
                    <div class="notifcontainer" style="height:800px; width: 360px">
                        <div style="margin-left: 15px;font-size: 24px;font-weight: 700;line-height:28.0008px;margin-top: 10px;" class="d-flex justify-content-between align-items-center">
                            <span>Notifications</span>
                            <MudIconButton OnClick="MarkAllasRead" Icon="@Icons.Material.Filled.MarkAsUnread" Style="margin-right: 10px"></MudIconButton>
                        </div>
                        <div class="notifbox">
                            <span style="font-size:17px;line-height:20.0005px;font-weight:bold;">New</span>
                            @foreach (var item in PendingCount.OrderByDescending(d => d.InsertedTime).Take(limitDisplayNotif))
                            {
                                @if (DateTime.Now - item.InsertedTime < TimeSpan.FromMinutes(60))
                                {
                                    <MudMenuItem class="d-flex eachnotifbox align-items-center justify-content-between" @onclick="(() => ReadNotif(item.Id))">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <EmployeeAvatarSize verify="@item.Verify_Id" />
                                                </div>
                                                <div class="d-flex flex-column">
                                                    @foreach (var emp in EmployeeList)
                                                    {
                                                        if (emp.Verify_Id == item.Verify_Id)
                                                        {
                                                            <span style="font-size: 15px;line-height:19.9995px"><b>@GlobalConfigService.CapitalizeFirstLetter(emp.FirstName) @GlobalConfigService.CapitalizeFirstLetter(emp.LastName)</b> requested a leave.</span>
                                                        }
                                                    }

                                                    <div>
                                                        <span style="font-size: 13px;line-height:16.0004px">@GetTimeAgo(item.InsertedTime)</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div>
                                                @if (item.ReadStatus != "Read")
                                                {
                                                    <span class="dot"></span>
                                                }
                                            </div>
                                        </div>
                                    </MudMenuItem>
                                }
                            }
                        </div>

                        <div class="notifbox mb-0">
                            <span style="font-size:17px;line-height:20.0005px;font-weight:bold;">Earlier</span>
                            @foreach (var item in PendingCount.OrderByDescending(d => d.InsertedTime).Take(limitDisplayNotif))
                            {
                                @if (DateTime.Now - item.InsertedTime > TimeSpan.FromMinutes(60))
                                {
                                    <MudMenuItem class="d-flex eachnotifbox align-items-center justify-content-between" @onclick="(() => ReadNotif(item.Id))">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <EmployeeAvatarSize verify="@item.Verify_Id" />
                                                </div>
                                                <div class="d-flex flex-column">
                                                    @foreach (var emp in EmployeeList)
                                                    {
                                                        if (emp.Verify_Id == item.Verify_Id)
                                                        {
                                                            <span style="font-size: 15px;line-height:19.9995px"><b>@GlobalConfigService.CapitalizeFirstLetter(emp.FirstName) @GlobalConfigService.CapitalizeFirstLetter(emp.LastName)</b> requested a leave.</span>
                                                        }
                                                    }

                                                    <div>
                                                        <span style="font-size: 13px;line-height:16.0004px">@GetTimeAgo(item.InsertedTime)</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div>
                                                @if (item.ReadStatus != "Read")
                                                {
                                                    <span class="dot"></span>
                                                }
                                            </div>
                                        </div>
                                    </MudMenuItem>
                                }
                            }
                        </div>
                        @if (PendingCount.Count() !> 10)
                        {
                            <div class="seemorebutton" @onclick="UpdateLimitNotif">
                                See More
                            </div>
                        }
                    </div>                
                    </ChildContent>
            </MudMenu>
            @if (GlobalConfigService.Role == "HR" || GlobalConfigService.Role == "System Administrator")
            {
                @* <MudText Class="fullnameappbar" Style="font-family: 'Poppins', sans-serif !important;margin-right: 8px;font-size: 14px;color: #6A707D;">@FULLNAME</MudText> *@
                <MudMenu Class="btnburger" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudTooltip Text="Account">
                            <MudAvatar>
                                <MudImage Src="@ImageData"></MudImage>
                            </MudAvatar>
                        </MudTooltip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="OpenChangePass" Icon="@Icons.Material.Filled.Password" IconSize="Size.Small">Change Password</MudMenuItem>
                        <MudMenuItem OnClick="Logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" IconSize="Size.Small" Style="color:#E97777">Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            }
            else
            {
                @* <MudText Class="fullnameappbar" Style="font-family: 'Poppins', sans-serif !important;margin-right: 8px;font-size: 14px;color: #6A707D;">@FULLNAME</MudText> *@
                <MudMenu Class="btnburger" Icon="@Icons.Material.Filled.ManageAccounts" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudTooltip Text="Account">
                            <MudAvatar>
                                <MudImage Src="@ImageData"></MudImage>
                            </MudAvatar>
                        </MudTooltip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="ViewProfile" Icon="@Icons.Material.Rounded.Person" IconSize="Size.Small">Profile</MudMenuItem>
                        <MudDivider DividerType="DividerType.Middle" Class="my-2" />
                        <MudMenuItem OnClick="OpenChangePass" Icon="@Icons.Material.Filled.Password" IconSize="Size.Small">Change Password</MudMenuItem>
                        <MudMenuItem OnClick="Logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" IconSize="Size.Small" Style="color:#E97777">Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            }
        </MudAppBar>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudAppBar Elevation="0" Style="left: 0; width: max-content; padding-right: 15px; padding-left: 15px; ">
            <MudIconButton Icon="@Icons.Material.Rounded.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            @* My Application *@

            <MudSpacer />

        </MudAppBar>
    </MudHidden>
    

    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudDrawer @bind-Open="@_drawerOpen" Fixed="true" Elevation="0" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" Class="sidebarmenu">
            @if (_drawerOpen == true)
            {
                <a href="/dashboard">
                    <MudDrawerHeader>
                        <MudImage Src="./images/SonicSales.png" Fluid=true Style="width: 80%;" Class="mb-3 mt-1" />
                    </MudDrawerHeader>
                </a>
            }
            else
            {
                <a href="/dashboard">
                    <MudDrawerHeader Style="padding: 15px 0px 10px 12px">
                        <MudImage Src="./images/logo.png" Fluid=true Style="width: 80%;" Class="mb-3 mt-1" />
                    </MudDrawerHeader>
                </a>
            }
            <NavMenu />
        </MudDrawer>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudDrawer @bind-Open="@_drawerOpen" Fixed="true" Elevation="0" Class="sidebarmenu">
            <MudDrawerHeader>
                <MudImage Src="./images/SonicSales.png" Fluid=true Style="width: 80%;" Class="mb-3 mt-1" />
            </MudDrawerHeader>
            <NavMenu />
        </MudDrawer>
    </MudHidden>
    
    <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="true">
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudHidden>

    <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="true">
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="padding-right: 15px; padding-left: 15px">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudHidden>
</MudLayout>

<BlazoredToasts Position="ToastPosition.BottomRight" Timeout="5" IconType="IconType.FontAwesome" SuccessClass="success-toast-override" SuccessIcon="fa fa-thumbs-up" ErrorIcon="fa fa-bug"  ShowProgressBar="true" />

@code {
    bool _drawerOpen = false;

    void DrawerToggle()
    {
        if (_drawerOpen == false)
            _drawerOpen = true;
        else
            _drawerOpen = !_drawerOpen;

    }
    private int limitDisplayNotif = 10;
    private void UpdateLimitNotif()
    {
        limitDisplayNotif += 10;
    }

    private bool _isDarkMode;
    private string VERIFY = "";
    private string USERNAME = "";
    private string FULLNAME = "";

    public RenderFragment html;
    private Timer timer;
    private Timer timeruser;

    private static int Count1 { get; set; }
    private string Userrole = string.Empty;
    private string Playstring { get; set; } = "muted";

    private List<Emp_LeaveHistoryT> PendingCount = new();
    private List<EmployeeT> EmployeeList = new();
    private int newRequest;
    private int badgeCount =0;
    private int countSnack = 0;


    protected override async Task OnInitializedAsync()
    {
        // await JSRuntime.InitializeInactivityTimer(DotNetObjectReference.Create(this));
        try
        {
            await Task.Delay(1);
            VERIFY = GlobalConfigService.VerifyId;
            USERNAME = GlobalConfigService.Username;
            FULLNAME = await EmployeeService.Getname(Convert.ToInt32(GlobalConfigService.User_Id));
            
            await EmployeeService.GetEmployee();
            EmployeeList = EmployeeService.EmployeeTs;


            Userrole = GlobalConfigService.Role;

            if (Userrole == "System Administrator" || Userrole == "HR")
            {
                timer = new Timer();
                timer.Interval = 3000;
                timer.Elapsed += OnTimerElapsed;
                timer.Enabled = true;
            }

            await EmployeeImg(VERIFY);//image

        }
        catch (Exception)
        {
            ImageData = string.Format("images/imgholder.jpg");
        }
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        await JSRuntime.InvokeVoidAsync("themeToggle", _isDarkMode);
    }

    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Blue.Darken4,
                // Secondary = Colors.Green.Accent4,
                AppbarBackground = "#E9ECEF",
                AppbarText = "#27374D",
                Background = "#E9ECEF",
                BackgroundGrey = "E9ECEF",
                DrawerBackground = "E9ECEF",
                DrawerText = "#424242",
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Blue.Lighten1,
                AppbarBackground = "#24222D",
                AppbarText = "#FAFAF5",
                Background = "#24222D",
                BackgroundGrey = "#2B2934",
                DrawerBackground = "#111315",
                DrawerText = "#FAFAF5",
            },


        };

    // [JSInvokable]
    public async Task Logout()
    {
        try
        {
            var id = Convert.ToInt32(GlobalConfigService.User_Id);
            await AuthService.UpdateLoginStatus(id);
            await LocalStorage.RemoveItemAsync("token");
            await AuthStateProvider.GetAuthenticationStateAsync();

            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _toastService.ShowError(ex.Message);
            return;
        }
    }

    private void OpenChangePass()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = true };
        DialogService.Show<ChangePassDialog>("", options);
    }

    private void ViewProfile() => NavigationManager.NavigateTo($"/profile/{USERNAME}");

    private string ImageData { get; set; }

    private async Task EmployeeImg(string verifyCode)
    {
        var imagemodel = await ImageService.GetImageData(verifyCode);
        if (imagemodel != null)
        {
            var base642 = Convert.ToBase64String(imagemodel);
            ImageData = string.Format("data:image/png;base64,{0}", base642);
        }
    }

    private string GetTimeAgo(DateTime? insertedTime)
    {
        if (insertedTime.HasValue)
        {
            var timeDifference = DateTime.Now - insertedTime.Value;

            if (timeDifference.TotalDays >= 1)
            {
                return $"{(int)timeDifference.TotalDays} {((int)timeDifference.TotalDays == 1 ? " day" : " days")} ago";
            }
            else if (timeDifference.TotalHours >= 1)
            {
                return $"{(int)timeDifference.TotalHours} {((int)timeDifference.TotalHours == 1 ? " hour" : " hours")} ago";
            }
            else
            {
                return $"{(int)timeDifference.TotalMinutes} {((int)timeDifference.TotalMinutes == 1 ? " minute" : " minutes")} ago";
            }
        }
        else
        {
            return "Invalid time";
        }
    }

    private async Task ReadNotif(int id)
    {
        Emp_LeaveHistoryT obj = new();
        obj = await LeaveHistoryService.GetSingleLeaveHistory(id);
        obj.ReadStatus = "Read";
        await LeaveHistoryService.UpdateLeaveHistory(obj);

        NavigationManager.NavigateTo("/leaveApprovals");
    }

    private async Task MarkAllasRead()
    {
        await LeaveHistoryService.UpdateAllReadStatus("Unread", "Read");
    }

    #region NOTIF ADMIN
    private async void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        await LeaveHistoryService.GetLeaveHistory();
        badgeCount = LeaveHistoryService.Emp_LeaveHistoryTs.Where(d => d.ReadStatus != "Read").Count();

        PendingCount = await LeaveHistoryService.Getpendingcount();
        newRequest = PendingCount.Count();

        Console.WriteLine(newRequest);

        countSnack = newRequest;
        if (countSnack != 0)
        {
           OnVal(newRequest);
        }
        else
        {
            countSnack = 0;
            OnTuneOff();
        }
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    [JSInvokable]
    private void OnVal(int valset)
    {
        if (valset != Count1)
        {
            _toastService.ShowSuccess("New Leave Request.");
            OnTuneOn();
            Count1 = valset;
        }
        else
        {
            OnTuneOff();
        }
    }

    public void OnTuneOn()
    {
        RenderFragment CreateDynamicComponent() => builder =>
        {
            builder.OpenComponent(0, typeof(TuneOn));
            builder.CloseComponent();
        };
        html = CreateDynamicComponent();
    }

    public void OnTuneOff()
    {
        RenderFragment CreateDynamicComponent() => builder =>
        {
            builder.OpenComponent(0, typeof(TuneOff));
            builder.CloseComponent();
        };
        html = CreateDynamicComponent();
    }

    #endregion
}